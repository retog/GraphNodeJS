{"version":3,"sources":["webpack:///GraphNode.js","webpack:///webpack/bootstrap b16b903f27a51a7dd50d","webpack:///./js/GraphNode.js","webpack:///external \"$rdf\"","webpack:///external \"fetch\""],"names":["GraphNode","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","Function","bind","apply","Impl","concat","Array","slice","arguments","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","$rdf","fetch","Headers","h","window","_class","nodes","graph","sources","this","_graph","isArray","value","_this","termType","indexOf","split","Promise","resolve","uri","rdfFetch","then","response","node","f","_this2","results","map","all","_this3","_this4","predicate","each","statementsMatching","undefined","statement","subject","Error","options","login","ggg","init","headers","set","ok","reject","mediaType","text","DOMParser","console","log","parse","error","status"],"mappings":"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","file":"GraphNode.js","sourcesContent":["var GraphNode =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar $rdf = __webpack_require__(1);\nvar fetch = __webpack_require__(2);\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\n\nvar Headers = function (h) {\n    return h ? h : window.Headers;\n}(fetch.Headers);\n\nfunction GraphNode() {\n    return new (Function.prototype.bind.apply(GraphNode.Impl, [null].concat(Array.prototype.slice.call(arguments))))();\n}\n\nGraphNode.Impl = function () {\n    function _class(nodes, graph, sources) {\n        _classCallCheck(this, _class);\n\n        this._graph = graph;\n        if (Array.isArray(nodes)) {\n            this.nodes = nodes;\n            /*if (this.nodes.length === 0) {\n                throw \"Can't represent empty set of nodes\";\n            }*/\n        } else {\n            this.nodes = [nodes];\n        }\n        this.sources = sources;\n    }\n\n    _createClass(_class, [{\n        key: \"fetch\",\n        value: function fetch() {\n            var _this = this;\n\n            if (this.termType !== \"NamedNode\" || this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(function (response) {\n                    return response.graph();\n                }).then(function (graph) {\n                    return GraphNode(_this.node, graph, [uri]);\n                });\n            }\n        }\n\n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n\n    }, {\n        key: \"each\",\n        value: function each(f) {\n            var _this2 = this;\n\n            var results = this.nodes.map(function (node) {\n                return f(GraphNode([node], _this2.graph, _this2.sources));\n            });\n            return Promise.all(results);\n        }\n    }, {\n        key: \"fetchEach\",\n        value: function fetchEach(f) {\n            var _this3 = this;\n\n            var results = this.nodes.map(function (node) {\n                return GraphNode([node], _this3.graph, _this3.sources).fetch().then(f);\n            });\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n\n    }, {\n        key: \"split\",\n        value: function split() {\n            var _this4 = this;\n\n            return this.nodes.map(function (node) {\n                return GraphNode([node], _this4.graph, _this4.sources);\n            });\n        }\n    }, {\n        key: \"out\",\n        value: function out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n    }, {\n        key: \"in\",\n        value: function _in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(function (statement) {\n                return statement.subject;\n            }), this.graph, this.sources);\n        }\n    }, {\n        key: \"graph\",\n        get: function get() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n    }, {\n        key: \"node\",\n        get: function get() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n    }, {\n        key: \"termType\",\n        get: function get() {\n            return this.node.termType;\n        }\n    }, {\n        key: \"value\",\n        get: function get() {\n            ;\n            return this.node.value;\n        }\n    }]);\n\n    return _class;\n}();\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function (uri, options, login) {\n    function plainFetch(uri) {\n        var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (!init.headers) {\n            init.headers = new Headers();\n        }\n        if (!init.headers.get(\"Accept\")) {\n            init.headers.set(\"Accept\", \"text/turtle;q=1, application/n-triples;q=.9, \" + \"application/rdf+xml;q=.8, application/ld+json;q=.7, */*;q=.1\");\n        }\n        return fetch(uri, init).then(function (response) {\n            if (response.ok) {\n                response.graph = function () {\n                    return new Promise(function (resolve, reject) {\n                        var graph = $rdf.graph();\n                        var mediaType = response.headers.get(\"Content-type\").split(\";\")[0];\n                        return response.text().then(function (text) {\n                            if (mediaType === \"text/html\" && typeof DOMParser !== 'undefined') {\n                                console.log(\"Working around rdflib problem parsing RDFa in browser\");\n                                //let opts = {baseURI: uri};\n                                //let parser = new DOMParser();\n                                //let doc = parser.parseFromString(text, \"text/html\");\n                                //let doc = new JSDOM(text);\n                                //let doc = DOMParser.parse(text);\n                                //let graph = getRdfaGraph(doc, opts);\n                                //console.log(graph.toString());\n                            }\n                            $rdf.parse(text, graph, uri, mediaType, function (error, graph) {\n                                if (error) {\n                                    reject(error);\n                                } else {\n                                    resolve(graph);\n                                }\n                            });\n                        });\n                    });\n                };\n                return response;\n            } else {\n                return response;\n            }\n        });\n    };\n    var ggg = this;\n    return plainFetch(uri, options).then(function (response) {\n        if (response.status < 300) {\n            return response;\n        } else {\n            if (login && response.status === 401) {\n                console.log(\"Got 401 response, attempting to login\");\n                return login().then(function () {\n                    return ggg.rdfFetch(uri, options);\n                });\n            } else {\n                return response;\n            }\n        }\n    });\n};\n\nmodule.exports = GraphNode;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = $rdf;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = fetch;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// GraphNode.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b16b903f27a51a7dd50d","var $rdf = require(\"rdflib\");\nvar fetch = require(\"node-fetch\");\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\n\nlet Headers = ((h) => h ? h : window.Headers)(fetch.Headers);\n\nfunction GraphNode() {\n    return new GraphNode.Impl(...arguments);\n}\n\nGraphNode.Impl = class {\n        \n        constructor(nodes, graph, sources) {\n            this._graph = graph;\n            if (Array.isArray(nodes)) {\n                this.nodes = nodes;\n                /*if (this.nodes.length === 0) {\n                    throw \"Can't represent empty set of nodes\";\n                }*/\n            } else {\n                this.nodes = [nodes];\n            }\n            this.sources = sources;\n        }\n        \n        get graph() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n        \n        get node() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n        \n        get termType() {\n            return this.node.termType;\n        }\n        \n        get value() {;\n            return this.node.value;\n        }\n        \n        fetch() {\n            if ((this.termType !== \"NamedNode\") || \n                        (this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1)) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(response => response.graph()).then(graph => GraphNode(this.node, graph, [uri]));\n            }\n        }\n        \n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n        each(f) {\n            var results = this.nodes.map(node => f(GraphNode([node], this.graph, this.sources)));\n            return Promise.all(results);\n        }\n        \n        fetchEach(f) {\n            var results = this.nodes.map(node => GraphNode([node], this.graph, this.sources).fetch().then(f));\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n        split() {\n            return this.nodes.map(node => GraphNode([node], this.graph, this.sources));\n        }\n        \n        out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n        \n        in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(statement => statement.subject), this.graph, this.sources);\n        }\n    }\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function(uri, options, login) {\n    function plainFetch(uri, init = {}) {\n        if (!init.headers) {\n            init.headers = new Headers();\n        }\n        if (!init.headers.get(\"Accept\")) {\n            init.headers.set(\"Accept\", \"text/turtle;q=1, application/n-triples;q=.9, \"+\n                \"application/rdf+xml;q=.8, application/ld+json;q=.7, */*;q=.1\");\n        }\n        return fetch(uri, init).then(response => {\n            if (response.ok) {\n                response.graph = () => new Promise((resolve, reject) => {\n                    let graph = $rdf.graph();\n                    let mediaType = response.headers.get(\"Content-type\").split(\";\")[0];\n                    return response.text().then(text => {\n                        if ((mediaType === \"text/html\") && (typeof DOMParser !== 'undefined')) {\n                            console.log(\"Working around rdflib problem parsing RDFa in browser\");\n                            //let opts = {baseURI: uri};\n                            //let parser = new DOMParser();\n                            //let doc = parser.parseFromString(text, \"text/html\");\n                            //let doc = new JSDOM(text);\n                            //let doc = DOMParser.parse(text);\n                            //let graph = getRdfaGraph(doc, opts);\n                            //console.log(graph.toString());\n                        }\n                        $rdf.parse(text, graph, uri, mediaType, (error, graph) => {\n                            if (error) {\n                                reject(error);\n                            } else {\n                                resolve(graph);\n                            }\n                        });\n                    });\n                });\n                return response;\n            } else {\n                return response;\n            }\n        });\n    };\n    var ggg = this;\n    return plainFetch(uri, options).then(function (response) {\n        if (response.status < 300) {\n            return response;\n        } else {\n            if (login && response.status === 401) {\n                console.log(\"Got 401 response, attempting to login\");\n                return login().then(function () {\n                    return ggg.rdfFetch(uri, options);\n                });\n            } else {\n                return response;\n            }\n        }\n    });\n};\n\nmodule.exports = GraphNode;\n\n\n\n// WEBPACK FOOTER //\n// ./js/GraphNode.js","module.exports = $rdf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"$rdf\"\n// module id = 1\n// module chunks = 0","module.exports = fetch;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fetch\"\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}