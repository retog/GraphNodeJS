{"version":3,"sources":["webpack:///GraphNode.js","webpack:///webpack/bootstrap 9641c3d910df8dc25913","webpack:///external \"$rdf\"","webpack:///./js/GraphNode.js","webpack:///external \"fetch\"","webpack:///./js/rdfa-processor-dirty-hack.js"],"names":["GraphNode","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","$rdf","_classCallCheck","instance","Constructor","TypeError","Function","bind","apply","Impl","concat","Array","slice","arguments","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","fetch","RDFaProcessor","Headers","h","window","_class","nodes","graph","sources","this","_graph","isArray","value","_this","termType","indexOf","split","Promise","resolve","uri","rdfFetch","then","response","node","f","_this2","results","map","all","_this3","_this4","predicate","each","statementsMatching","undefined","statement","subject","Error","options","login","ggg","init","headers","set","ok","reject","mediaType","text","DOMParser","console","log","parseRDFaDOM","Util","parseXML","contentType","error","parse","status","BlankNode","Literal","rdf","DataFactory","NamedNode","Uri","Node","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","kb","subjects","prefixes","terms","blankNodes","htmlOptions","selfClosing","theOne","Date","getTime","language","vocabulary","blankCounter","langAttributes","namespaceURI","localName","inXHTMLMode","absURIRE","finishedHandlers","origin","su","ob","pr","or","namedNode","base","toRDFNodeObject","add","path","nodeType","parentNode","mappings","newMappings","k","dateTimeTypes","matched","pattern","exec","type","colon","prefix","substring","NCNAME","test","curie","parseCURIE","resolveAndNormalize","defaultVocabulary","ignoreTerms","parseTermOrCURIEOrAbsURI","str","values","tokenize","join","trim","charAt","parseCURIEOrURI","term","toLowerCase","baseURI","documentElement","setContext","queue","removeHash","hash","baseURIMap","push","current","context","item","shift","parent","listMapping","_predicate","list","bnodes","_i","newBlankNode","_i2","addTriple","objectURI","skip","newSubject","currentObjectResource","typedResource","prefixesCopied","incomplete","listMappingDifferent","parseURI","vocabAtt","getAttributeNode","baseSubject","spec","attributes","att","nodeName","copyMappings","ref","prefixAtt","parsePrefixMappings","xmlLangAtt","_i3","getAttributeNodeNS","_value","relAtt","revAtt","typeofAtt","propertyAtt","datatypeAtt","datetimeAtt","inHTMLMode","contentAtt","aboutAtt","srcAtt","resourceAtt","hrefAtt","inlistAtt","relAttPredicates","_i4","parsePredicate","revAttPredicates","_i5","parseSafeCURIEOrCURIEOrURI","parentObject","encodeURI","id","newSubjectOrigin","_i6","typeURI","_i7","_list","_i8","_i9","_i10","_list2","_i11","forward","_i12","datatype","content","PlainLiteralURI","XMLLiteralURI","HTMLLiteralURI","textContent","deriveDateTimeType","_i13","_predicate2","_list3","childNodes","_i14","childContext","listSubject","unshift","child","lastChild","previousSibling","copyProperties","_i15","getAttribute","setXHTMLContext","document","doctype","publicId","systemId","setHTMLContext","setXMLContext","setInitialContext","x","string","keys","forEach","domToString","replace","dom","process","nameChar","nameStartChar","RegExp"],"mappings":"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","file":"GraphNode.js","sourcesContent":["var GraphNode =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = $rdf;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar $rdf = __webpack_require__(0);\nvar fetch = __webpack_require__(2);\nvar RDFaProcessor = __webpack_require__(3);\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\n\nvar Headers = function (h) {\n    return h ? h : window.Headers;\n}(fetch.Headers);\n\nfunction GraphNode() {\n    return new (Function.prototype.bind.apply(GraphNode.Impl, [null].concat(Array.prototype.slice.call(arguments))))();\n}\n\nGraphNode.Impl = function () {\n    function _class(nodes, graph, sources) {\n        _classCallCheck(this, _class);\n\n        this._graph = graph;\n        if (Array.isArray(nodes)) {\n            this.nodes = nodes;\n            /*if (this.nodes.length === 0) {\n                throw \"Can't represent empty set of nodes\";\n            }*/\n        } else {\n            this.nodes = [nodes];\n        }\n        this.sources = sources;\n    }\n\n    _createClass(_class, [{\n        key: \"fetch\",\n        value: function fetch() {\n            var _this = this;\n\n            if (this.termType !== \"NamedNode\" || this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(function (response) {\n                    return response.graph();\n                }).then(function (graph) {\n                    return GraphNode(_this.node, graph, [uri]);\n                });\n            }\n        }\n\n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n\n    }, {\n        key: \"each\",\n        value: function each(f) {\n            var _this2 = this;\n\n            var results = this.nodes.map(function (node) {\n                return f(GraphNode([node], _this2.graph, _this2.sources));\n            });\n            return Promise.all(results);\n        }\n    }, {\n        key: \"fetchEach\",\n        value: function fetchEach(f) {\n            var _this3 = this;\n\n            var results = this.nodes.map(function (node) {\n                return GraphNode([node], _this3.graph, _this3.sources).fetch().then(f);\n            });\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n\n    }, {\n        key: \"split\",\n        value: function split() {\n            var _this4 = this;\n\n            return this.nodes.map(function (node) {\n                return GraphNode([node], _this4.graph, _this4.sources);\n            });\n        }\n    }, {\n        key: \"out\",\n        value: function out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n    }, {\n        key: \"in\",\n        value: function _in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(function (statement) {\n                return statement.subject;\n            }), this.graph, this.sources);\n        }\n    }, {\n        key: \"graph\",\n        get: function get() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n    }, {\n        key: \"node\",\n        get: function get() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n    }, {\n        key: \"termType\",\n        get: function get() {\n            return this.node.termType;\n        }\n    }, {\n        key: \"value\",\n        get: function get() {\n            ;\n            return this.node.value;\n        }\n    }]);\n\n    return _class;\n}();\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function (uri, options, login) {\n    function plainFetch(uri) {\n        var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (!init.headers) {\n            init.headers = new Headers();\n        }\n        if (!init.headers.get(\"Accept\")) {\n            init.headers.set(\"Accept\", \"text/turtle;q=1, application/n-triples;q=.9, \" + \"application/rdf+xml;q=.8, application/ld+json;q=.7, */*;q=.1\");\n        }\n        return fetch(uri, init).then(function (response) {\n            if (response.ok) {\n                response.graph = function () {\n                    return new Promise(function (resolve, reject) {\n                        var graph = $rdf.graph();\n                        var mediaType = response.headers.get(\"Content-type\").split(\";\")[0];\n                        return response.text().then(function (text) {\n                            if (mediaType === \"text/html\" && typeof DOMParser !== 'undefined') {\n                                console.log(\"Working around rdflib problem parsing RDFa in browser\");\n                                try {\n                                    RDFaProcessor.parseRDFaDOM($rdf.Util.parseXML(text, { contentType: mediaType }), graph, uri);\n                                } catch (error) {\n                                    reject(error);\n                                    return;\n                                }\n                                resolve(graph);\n                            } else {\n                                $rdf.parse(text, graph, uri, mediaType, function (error, graph) {\n                                    if (error) {\n                                        reject(error);\n                                    } else {\n                                        resolve(graph);\n                                    }\n                                });\n                            }\n                        });\n                    });\n                };\n                return response;\n            } else {\n                return response;\n            }\n        });\n    };\n    var ggg = this;\n    return plainFetch(uri, options).then(function (response) {\n        if (response.status < 300) {\n            return response;\n        } else {\n            if (login && response.status === 401) {\n                console.log(\"Got 401 response, attempting to login\");\n                return login().then(function () {\n                    return ggg.rdfFetch(uri, options);\n                });\n            } else {\n                return response;\n            }\n        }\n    });\n};\n\nmodule.exports = GraphNode;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = fetch;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n//The defaut version never worked, this works sometimes\n\n\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n//  RDFa Parser for rdflib.js\n\n// Originally by: Alex Milowski\n// From https://github.com/alexmilowski/green-turtle\n// Converted: timbl 2015-08-25 not yet working\n// Added wrapper: csarven 2016-05-09 working\n\n// RDFaProcessor.prototype = new Object() // Was URIResolver\n\n// RDFaProcessor.prototype.constructor=RDFaProcessor\n\n// options.base = base URI    not really an option, shopuld always be set.\n//\nvar $rdf = __webpack_require__(0);\nvar BlankNode = $rdf.BlankNode;\nvar Literal = $rdf.Literal;\nvar rdf = $rdf.DataFactory;\nvar NamedNode = $rdf.NamedNode;\nvar Uri = $rdf.uri;\nvar Util = $rdf.Util;\n\nif (typeof Node === 'undefined') {\n  //  @@@@@@ Global. Interface to xmldom.\n  var Node = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n}\n\nvar RDFaProcessor = function () {\n  function RDFaProcessor(kb, options) {\n    _classCallCheck(this, RDFaProcessor);\n\n    this.options = options || {};\n    this.kb = kb;\n    this.target = options.target || {\n      graph: {\n        subjects: {},\n        prefixes: {},\n        terms: {}\n        // XXX: Added to track bnodes\n      } };this.blankNodes = [];\n    // XXX: Added for normalisation\n    this.htmlOptions = {\n      'selfClosing': 'br img input area base basefont col colgroup source wbr isindex link meta param hr'\n    };\n    this.theOne = '_:' + new Date().getTime();\n    this.language = null;\n    this.vocabulary = null;\n    this.blankCounter = 0;\n    this.langAttributes = [{ namespaceURI: 'http://www.w3.org/XML/1998/namespace', localName: 'lang' }];\n    this.inXHTMLMode = false;\n    this.absURIRE = /[\\w\\_\\-]+:\\S+/;\n    this.finishedHandlers = [];\n    this.init();\n  }\n\n  _createClass(RDFaProcessor, [{\n    key: 'addTriple',\n    value: function addTriple(origin, subject, predicate, object) {\n      var su, ob, pr, or;\n      if (typeof subject === 'undefined') {\n        su = rdf.namedNode(this.options.base);\n      } else {\n        su = this.toRDFNodeObject(subject);\n      }\n      pr = this.toRDFNodeObject(predicate);\n      ob = this.toRDFNodeObject(object);\n      or = rdf.namedNode(this.options.base);\n      // console.log('Adding { ' + su + ' ' + pr + ' ' + ob + ' ' + or + ' }')\n      this.kb.add(su, pr, ob, or);\n    }\n  }, {\n    key: 'ancestorPath',\n    value: function ancestorPath(node) {\n      var path = '';\n      while (node && node.nodeType !== Node.DOCUMENT_NODE) {\n        path = '/' + node.localName + path;\n        node = node.parentNode;\n      }\n      return path;\n    }\n  }, {\n    key: 'copyMappings',\n    value: function copyMappings(mappings) {\n      var newMappings = {};\n      for (var k in mappings) {\n        newMappings[k] = mappings[k];\n      }\n      return newMappings;\n    }\n  }, {\n    key: 'copyProperties',\n    value: function copyProperties() {}\n  }, {\n    key: 'deriveDateTimeType',\n    value: function deriveDateTimeType(value) {\n      for (var i = 0; i < RDFaProcessor.dateTimeTypes.length; i++) {\n        // console.log(\"Checking \"+value+\" against \"+RDFaProcessor.dateTimeTypes[i].type)\n        var matched = RDFaProcessor.dateTimeTypes[i].pattern.exec(value);\n        if (matched && matched[0].length === value.length) {\n          // console.log(\"Matched!\")\n          return RDFaProcessor.dateTimeTypes[i].type;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'init',\n    value: function init() {}\n  }, {\n    key: 'newBlankNode',\n    value: function newBlankNode() {\n      this.blankCounter++;\n      return '_:' + this.blankCounter;\n    }\n  }, {\n    key: 'newSubjectOrigin',\n    value: function newSubjectOrigin(origin, subject) {}\n  }, {\n    key: 'parseCURIE',\n    value: function parseCURIE(value, prefixes, base) {\n      var colon = value.indexOf(':');\n      var uri;\n      if (colon >= 0) {\n        var prefix = value.substring(0, colon);\n        if (prefix === '') {\n          // default prefix\n          uri = prefixes[''];\n          return uri ? uri + value.substring(colon + 1) : null;\n        } else if (prefix === '_') {\n          // blank node\n          return '_:' + value.substring(colon + 1);\n        } else if (RDFaProcessor.NCNAME.test(prefix)) {\n          uri = prefixes[prefix];\n          if (uri) {\n            return uri + value.substring(colon + 1);\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'parseCURIEOrURI',\n    value: function parseCURIEOrURI(value, prefixes, base) {\n      var curie = this.parseCURIE(value, prefixes, base);\n      if (curie) {\n        return curie;\n      }\n      return this.resolveAndNormalize(base, value);\n    }\n  }, {\n    key: 'parsePredicate',\n    value: function parsePredicate(value, defaultVocabulary, terms, prefixes, base, ignoreTerms) {\n      if (value === '') {\n        return null;\n      }\n      var predicate = this.parseTermOrCURIEOrAbsURI(value, defaultVocabulary, ignoreTerms ? null : terms, prefixes, base);\n      if (predicate && predicate.indexOf('_:') === 0) {\n        return null;\n      }\n      return predicate;\n    }\n  }, {\n    key: 'parsePrefixMappings',\n    value: function parsePrefixMappings(str, target) {\n      var values = this.tokenize(str);\n      var prefix = null;\n      // var uri = null\n      for (var i = 0; i < values.length; i++) {\n        if (values[i][values[i].length - 1] === ':') {\n          prefix = values[i].substring(0, values[i].length - 1);\n        } else if (prefix) {\n          target[prefix] = this.options.base ? Uri.join(values[i], this.options.base) : values[i];\n          prefix = null;\n        }\n      }\n    }\n  }, {\n    key: 'parseSafeCURIEOrCURIEOrURI',\n    value: function parseSafeCURIEOrCURIEOrURI(value, prefixes, base) {\n      value = this.trim(value);\n      if (value.charAt(0) === '[' && value.charAt(value.length - 1) === ']') {\n        value = value.substring(1, value.length - 1);\n        value = value.trim(value);\n        if (value.length === 0) {\n          return null;\n        }\n        if (value === '_:') {\n          // the one node\n          return this.theOne;\n        }\n        return this.parseCURIE(value, prefixes, base);\n      } else {\n        return this.parseCURIEOrURI(value, prefixes, base);\n      }\n    }\n  }, {\n    key: 'parseTermOrCURIEOrAbsURI',\n    value: function parseTermOrCURIEOrAbsURI(value, defaultVocabulary, terms, prefixes, base) {\n      // alert(\"Parsing \"+value+\" with default vocab \"+defaultVocabulary)\n      value = this.trim(value);\n      var curie = this.parseCURIE(value, prefixes, base);\n      if (curie) {\n        return curie;\n      } else if (terms) {\n        if (defaultVocabulary && !this.absURIRE.exec(value)) {\n          return defaultVocabulary + value;\n        }\n        var term = terms[value];\n        if (term) {\n          return term;\n        }\n        var lcvalue = value.toLowerCase();\n        term = terms[lcvalue];\n        if (term) {\n          return term;\n        }\n      }\n      if (this.absURIRE.exec(value)) {\n        return this.resolveAndNormalize(base, value);\n      }\n      return null;\n    }\n  }, {\n    key: 'parseTermOrCURIEOrURI',\n    value: function parseTermOrCURIEOrURI(value, defaultVocabulary, terms, prefixes, base) {\n      // alert(\"Parsing \"+value+\" with default vocab \"+defaultVocabulary)\n      value = this.trim(value);\n      var curie = this.parseCURIE(value, prefixes, base);\n      if (curie) {\n        return curie;\n      } else {\n        var term = terms[value];\n        if (term) {\n          return term;\n        }\n        var lcvalue = value.toLowerCase();\n        term = terms[lcvalue];\n        if (term) {\n          return term;\n        }\n        if (defaultVocabulary && !this.absURIRE.exec(value)) {\n          return defaultVocabulary + value;\n        }\n      }\n      return this.resolveAndNormalize(base, value);\n    }\n  }, {\n    key: 'parseURI',\n    value: function parseURI(uri) {\n      return uri; // We just use strings as URIs, not objects now.\n    }\n  }, {\n    key: 'process',\n    value: function process(node, options) {\n      /*\r\n      if (!window.console) {\r\n         window.console = { log: function() {} }\r\n      }*/\n      var base;\n      if (node.nodeType === Node.DOCUMENT_NODE) {\n        base = node.baseURI;\n        node = node.documentElement;\n        //node.baseURI = base;\n        this.setContext(node);\n      } else if (node.parentNode.nodeType === Node.DOCUMENT_NODE) {\n        this.setContext(node);\n      }\n      var queue = [];\n      // Fix for Firefox that includes the hash in the base URI\n      var removeHash = function removeHash(baseURI) {\n        // Fix for undefined baseURI property\n        if (!baseURI && options && options.baseURI) {\n          return options.baseURI;\n        }\n\n        var hash = baseURI.indexOf('#');\n        if (hash >= 0) {\n          baseURI = baseURI.substring(0, hash);\n        }\n        if (options && options.baseURIMap) {\n          baseURI = options.baseURIMap(baseURI);\n        }\n        return baseURI;\n      };\n      queue.push({ current: node,\n        context: this.push(null, removeHash(node.baseURI))\n      });\n      while (queue.length > 0) {\n        var item = queue.shift();\n        if (item.parent) {\n          // Sequence Step 14: list triple generation\n          if (item.context.parent && item.context.parent.listMapping === item.listMapping) {\n            // Skip a child context with exactly the same mapping\n            continue;\n          }\n          // console.log(\"Generating lists for \"+item.subject+\", tag \"+item.parent.localName)\n          for (var _predicate in item.listMapping) {\n            var list = item.listMapping[_predicate];\n            if (list.length === 0) {\n              this.addTriple(item.parent, item.subject, _predicate, { type: RDFaProcessor.objectURI, value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' });\n              continue;\n            }\n            var bnodes = [];\n            for (var _i = 0; _i < list.length; _i++) {\n              bnodes.push(this.newBlankNode());\n              // this.newSubject(item.parent,bnodes[i])\n            }\n            for (var _i2 = 0; _i2 < bnodes.length; _i2++) {\n              this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#first', list[_i2]);\n              this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest', { type: RDFaProcessor.objectURI, value: _i2 + 1 < bnodes.length ? bnodes[_i2 + 1] : 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' });\n            }\n            this.addTriple(item.parent, item.subject, _predicate, { type: RDFaProcessor.objectURI, value: bnodes[0] });\n          }\n          continue;\n        }\n        var current = item.current;\n        var context = item.context;\n        // console.log(\"Tag: \"+current.localName+\", listMapping=\"+JSON.stringify(context.listMapping))\n        // Sequence Step 1\n        var skip = false;\n        var newSubject = null;\n        var currentObjectResource = null;\n        var typedResource = null;\n        var prefixes = context.prefixes;\n        var prefixesCopied = false;\n        var incomplete = [];\n        var listMapping = context.listMapping;\n        var listMappingDifferent = !context.parent;\n        var language = context.language;\n        var vocabulary = context.vocabulary;\n        // TODO: the \"base\" element may be used for HTML+RDFa 1.1\n        base = this.parseURI(removeHash(current.baseURI));\n        current.item = null;\n        // Sequence Step 2: set the default vocabulary\n        var vocabAtt = current.getAttributeNode('vocab');\n        if (vocabAtt) {\n          var value = this.trim(vocabAtt.value);\n          if (value.length > 0) {\n            vocabulary = value;\n            var baseSubject = base.spec;\n            // this.newSubject(current,baseSubject)\n            this.addTriple(current, baseSubject, 'http://www.w3.org/ns/rdfa#usesVocabulary', { type: RDFaProcessor.objectURI, value: vocabulary });\n          } else {\n            vocabulary = this.vocabulary;\n          }\n        }\n        // Sequence Step 3: IRI mappings\n        // handle xmlns attributes\n        for (var i = 0; i < current.attributes.length; i++) {\n          var att = current.attributes[i];\n          // if (att.namespaceURI==\"http://www.w3.org/2000/xmlns/\") {\n          if (att.nodeName.charAt(0) === 'x' && att.nodeName.indexOf('xmlns:') === 0) {\n            if (!prefixesCopied) {\n              prefixes = this.copyMappings(prefixes);\n              prefixesCopied = true;\n            }\n            var prefix = att.nodeName.substring(6);\n            // TODO: resolve relative?\n            var ref = this.trim(att.value);\n            prefixes[prefix] = this.options.base ? Uri.join(ref, this.options.base) : ref;\n          }\n        }\n        // Handle prefix mappings (@prefix)\n        var prefixAtt = current.getAttributeNode('prefix');\n        if (prefixAtt) {\n          if (!prefixesCopied) {\n            prefixes = this.copyMappings(prefixes);\n            prefixesCopied = true;\n          }\n          this.parsePrefixMappings(prefixAtt.value, prefixes);\n        }\n        // Sequence Step 4: language\n        var xmlLangAtt = null;\n        for (var _i3 = 0; !xmlLangAtt && _i3 < this.langAttributes.length; _i3++) {\n          xmlLangAtt = current.getAttributeNodeNS(this.langAttributes[_i3].namespaceURI, this.langAttributes[_i3].localName);\n        }\n        if (xmlLangAtt) {\n          var _value = this.trim(xmlLangAtt.value);\n          if (_value.length > 0) {\n            language = _value;\n          } else {\n            language = null;\n          }\n        }\n        var relAtt = current.getAttributeNode('rel');\n        var revAtt = current.getAttributeNode('rev');\n        var typeofAtt = current.getAttributeNode('typeof');\n        var propertyAtt = current.getAttributeNode('property');\n        var datatypeAtt = current.getAttributeNode('datatype');\n        var datetimeAtt = this.inHTMLMode ? current.getAttributeNode('datetime') : null;\n        var contentAtt = current.getAttributeNode('content');\n        var aboutAtt = current.getAttributeNode('about');\n        var srcAtt = current.getAttributeNode('src');\n        var resourceAtt = current.getAttributeNode('resource');\n        var hrefAtt = current.getAttributeNode('href');\n        var inlistAtt = current.getAttributeNode('inlist');\n        var relAttPredicates = [];\n        var predicate, values;\n        if (relAtt) {\n          values = this.tokenize(relAtt.value);\n          for (var _i4 = 0; _i4 < values.length; _i4++) {\n            predicate = this.parsePredicate(values[_i4], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt !== null);\n            if (predicate) {\n              relAttPredicates.push(predicate);\n            }\n          }\n        }\n        var revAttPredicates = [];\n        if (revAtt) {\n          values = this.tokenize(revAtt.value);\n          for (var _i5 = 0; _i5 < values.length; _i5++) {\n            predicate = this.parsePredicate(values[_i5], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt);\n            if (predicate) {\n              revAttPredicates.push(predicate);\n            }\n          }\n        }\n        // Section 3.1, bullet 7\n        if (this.inHTMLMode && (relAtt || revAtt) && propertyAtt) {\n          if (relAttPredicates.length === 0) {\n            relAtt = null;\n          }\n          if (revAttPredicates.length === 0) {\n            revAtt = null;\n          }\n        }\n        if (relAtt || revAtt) {\n          // Sequence Step 6: establish new subject and value\n          if (aboutAtt) {\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);\n          }\n          if (typeofAtt) {\n            typedResource = newSubject;\n          }\n          if (!newSubject) {\n            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) {\n              newSubject = removeHash(current.baseURI);\n            } else if (context.parentObject) {\n              // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI\n              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\n            }\n          }\n          if (resourceAtt) {\n            currentObjectResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\n          }\n          if (!currentObjectResource) {\n            if (hrefAtt) {\n              currentObjectResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\n            } else if (srcAtt) {\n              currentObjectResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\n            } else if (typeofAtt && !aboutAtt && !(this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body'))) {\n              currentObjectResource = this.newBlankNode();\n            }\n          }\n          if (typeofAtt && !aboutAtt && this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body')) {\n            typedResource = newSubject;\n          } else if (typeofAtt && !aboutAtt) {\n            typedResource = currentObjectResource;\n          }\n        } else if (propertyAtt && !contentAtt && !datatypeAtt) {\n          // Sequence Step 5.1: establish a new subject\n          if (aboutAtt) {\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);\n            if (typeofAtt) {\n              typedResource = newSubject;\n            }\n          }\n          if (!newSubject && current.parentNode.nodeType === Node.DOCUMENT_NODE) {\n            newSubject = removeHash(current.baseURI);\n            if (typeofAtt) {\n              typedResource = newSubject;\n            }\n          } else if (!newSubject && context.parentObject) {\n            // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI\n            newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\n          }\n          if (typeofAtt && !typedResource) {\n            if (resourceAtt) {\n              typedResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\n            }\n            if (!typedResource && hrefAtt) {\n              typedResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\n            }\n            if (!typedResource && srcAtt) {\n              typedResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\n            }\n            if (!typedResource && (this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) {\n              typedResource = newSubject;\n            }\n            if (!typedResource) {\n              typedResource = this.newBlankNode();\n            }\n            currentObjectResource = typedResource;\n          }\n          // console.log(current.localName+\", newSubject=\"+newSubject+\", typedResource=\"+typedResource+\", currentObjectResource=\"+currentObjectResource)\n        } else {\n          // Sequence Step 5.2: establish a new subject\n          if (aboutAtt) {\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);\n          }\n          if (!newSubject && resourceAtt) {\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\n          }\n          if (!newSubject && hrefAtt) {\n            newSubject = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\n          }\n          if (!newSubject && srcAtt) {\n            newSubject = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\n          }\n          if (!newSubject) {\n            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) {\n              newSubject = removeHash(current.baseURI);\n            } else if ((this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) {\n              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\n            } else if (typeofAtt) {\n              newSubject = this.newBlankNode();\n            } else if (context.parentObject) {\n              // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI\n              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\n              if (!propertyAtt) {\n                skip = true;\n              }\n            }\n          }\n          if (typeofAtt) {\n            typedResource = newSubject;\n          }\n        }\n        // console.log(current.tagName+\": newSubject=\"+newSubject+\", currentObjectResource=\"+currentObjectResource+\", typedResource=\"+typedResource+\", skip=\"+skip)\n        // var rdfaData = null\n        if (newSubject) {\n          // this.newSubject(current,newSubject)\n          if (aboutAtt || resourceAtt || typedResource) {\n            var id = newSubject;\n            if (typeofAtt && !aboutAtt && !resourceAtt && currentObjectResource) {\n              id = currentObjectResource;\n            }\n            // console.log(\"Setting data attribute for \"+current.localName+\" for subject \"+id)\n            this.newSubjectOrigin(current, id);\n          }\n        }\n        // Sequence Step 7: generate type triple\n        if (typedResource) {\n          values = this.tokenize(typeofAtt.value);\n          for (var _i6 = 0; _i6 < values.length; _i6++) {\n            var object = this.parseTermOrCURIEOrAbsURI(values[_i6], vocabulary, context.terms, prefixes, base);\n            if (object) {\n              this.addTriple(current, typedResource, RDFaProcessor.typeURI, { type: RDFaProcessor.objectURI, value: object });\n            }\n          }\n        }\n        // Sequence Step 8: new list mappings if there is a new subject\n        // console.log(\"Step 8: newSubject=\"+newSubject+\", context.parentObject=\"+context.parentObject)\n        if (newSubject && newSubject !== context.parentObject) {\n          // console.log(\"Generating new list mapping for \"+newSubject)\n          listMapping = {};\n          listMappingDifferent = true;\n        }\n        // Sequence Step 9: generate object triple\n        if (currentObjectResource) {\n          if (relAtt && inlistAtt) {\n            for (var _i7 = 0; _i7 < relAttPredicates.length; _i7++) {\n              var _list = listMapping[relAttPredicates[_i7]];\n              if (!_list) {\n                _list = [];\n                listMapping[relAttPredicates[_i7]] = _list;\n              }\n              _list.push({ type: RDFaProcessor.objectURI, value: currentObjectResource });\n            }\n          } else if (relAtt) {\n            for (var _i8 = 0; _i8 < relAttPredicates.length; _i8++) {\n              this.addTriple(current, newSubject, relAttPredicates[_i8], { type: RDFaProcessor.objectURI, value: currentObjectResource });\n            }\n          }\n          if (revAtt) {\n            for (var _i9 = 0; _i9 < revAttPredicates.length; _i9++) {\n              this.addTriple(current, currentObjectResource, revAttPredicates[_i9], { type: RDFaProcessor.objectURI, value: newSubject });\n            }\n          }\n        } else {\n          // Sequence Step 10: incomplete triples\n          if (newSubject && !currentObjectResource && (relAtt || revAtt)) {\n            currentObjectResource = this.newBlankNode();\n            // alert(current.tagName+\": generated blank node, newSubject=\"+newSubject+\" currentObjectResource=\"+currentObjectResource)\n          }\n          if (relAtt && inlistAtt) {\n            for (var _i10 = 0; _i10 < relAttPredicates.length; _i10++) {\n              var _list2 = listMapping[relAttPredicates[_i10]];\n              if (!_list2) {\n                _list2 = [];\n                listMapping[predicate] = _list2;\n              }\n              // console.log(\"Adding incomplete list for \"+predicate)\n              incomplete.push({ predicate: relAttPredicates[_i10], list: _list2 });\n            }\n          } else if (relAtt) {\n            for (var _i11 = 0; _i11 < relAttPredicates.length; _i11++) {\n              incomplete.push({ predicate: relAttPredicates[_i11], forward: true });\n            }\n          }\n          if (revAtt) {\n            for (var _i12 = 0; _i12 < revAttPredicates.length; _i12++) {\n              incomplete.push({ predicate: revAttPredicates[_i12], forward: false });\n            }\n          }\n        }\n        // Step 11: Current property values\n        if (propertyAtt) {\n          var datatype = null;\n          var content = null;\n          if (datatypeAtt) {\n            datatype = datatypeAtt.value === '' ? RDFaProcessor.PlainLiteralURI : this.parseTermOrCURIEOrAbsURI(datatypeAtt.value, vocabulary, context.terms, prefixes, base);\n            if (datetimeAtt && !contentAtt) {\n              content = datetimeAtt.value;\n            } else {\n              content = datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI ? null : contentAtt ? contentAtt.value : current.textContent;\n            }\n          } else if (contentAtt) {\n            datatype = RDFaProcessor.PlainLiteralURI;\n            content = contentAtt.value;\n          } else if (datetimeAtt) {\n            content = datetimeAtt.value;\n            datatype = RDFaProcessor.deriveDateTimeType(content);\n            if (!datatype) {\n              datatype = RDFaProcessor.PlainLiteralURI;\n            }\n          } else if (!relAtt && !revAtt) {\n            if (resourceAtt) {\n              content = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\n            }\n            if (!content && hrefAtt) {\n              content = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\n            } else if (!content && srcAtt) {\n              content = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\n            }\n            if (content) {\n              datatype = RDFaProcessor.objectURI;\n            }\n          }\n          if (!datatype) {\n            if (typeofAtt && !aboutAtt) {\n              datatype = RDFaProcessor.objectURI;\n              content = typedResource;\n            } else {\n              content = current.textContent;\n              if (this.inHTMLMode && current.localName === 'time') {\n                datatype = RDFaProcessor.deriveDateTimeType(content);\n              }\n              if (!datatype) {\n                datatype = RDFaProcessor.PlainLiteralURI;\n              }\n            }\n          }\n          values = this.tokenize(propertyAtt.value);\n          for (var _i13 = 0; _i13 < values.length; _i13++) {\n            var _predicate2 = this.parsePredicate(values[_i13], vocabulary, context.terms, prefixes, base);\n            if (_predicate2) {\n              if (inlistAtt) {\n                var _list3 = listMapping[_predicate2];\n                if (!_list3) {\n                  _list3 = [];\n                  listMapping[_predicate2] = _list3;\n                }\n                _list3.push(datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI ? { type: datatype, value: current.childNodes } : { type: datatype ? datatype : RDFaProcessor.PlainLiteralURI, value: content, language: language });\n              } else {\n                if (datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI) {\n                  this.addTriple(current, newSubject, _predicate2, { type: datatype, value: current.childNodes });\n                } else {\n                  this.addTriple(current, newSubject, _predicate2, { type: datatype ? datatype : RDFaProcessor.PlainLiteralURI, value: content, language: language });\n                  // console.log(newSubject+\" \"+predicate+\"=\"+content)\n                }\n              }\n            }\n          }\n        }\n        // Sequence Step 12: complete incomplete triples with new subject\n        if (newSubject && !skip) {\n          for (var _i14 = 0; _i14 < context.incomplete.length; _i14++) {\n            if (context.incomplete[_i14].list) {\n              // console.log(\"Adding subject \"+newSubject+\" to list for \"+context.incomplete[i].predicate)\n              // TODO: it is unclear what to do here\n              context.incomplete[_i14].list.push({ type: RDFaProcessor.objectURI, value: newSubject });\n            } else if (context.incomplete[_i14].forward) {\n              // console.log(current.tagName+\": completing forward triple \"+context.incomplete[i].predicate+\" with object=\"+newSubject)\n              this.addTriple(current, context.subject, context.incomplete[_i14].predicate, { type: RDFaProcessor.objectURI, value: newSubject });\n            } else {\n              // console.log(current.tagName+\": completing reverse triple with object=\"+context.subject)\n              this.addTriple(current, newSubject, context.incomplete[_i14].predicate, { type: RDFaProcessor.objectURI, value: context.subject });\n            }\n          }\n        }\n        var childContext = null;\n        var listSubject = newSubject;\n        if (skip) {\n          // TODO: should subject be null?\n          childContext = this.push(context, context.subject);\n          // TODO: should the entObject be passed along?  If not, then intermediary children will keep properties from being associated with incomplete triples.\n          // TODO: Verify: if the current baseURI has changed and the parentObject is the parent's base URI, then the baseURI should change\n          childContext.parentObject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\n          childContext.incomplete = context.incomplete;\n          childContext.language = language;\n          childContext.prefixes = prefixes;\n          childContext.vocabulary = vocabulary;\n        } else {\n          childContext = this.push(context, newSubject);\n          childContext.parentObject = currentObjectResource ? currentObjectResource : newSubject ? newSubject : context.subject;\n          childContext.prefixes = prefixes;\n          childContext.incomplete = incomplete;\n          if (currentObjectResource) {\n            // console.log(\"Generating new list mapping for \"+currentObjectResource)\n            listSubject = currentObjectResource;\n            listMapping = {};\n            listMappingDifferent = true;\n          }\n          childContext.listMapping = listMapping;\n          childContext.language = language;\n          childContext.vocabulary = vocabulary;\n        }\n        if (listMappingDifferent) {\n          // console.log(\"Pushing list parent \"+current.localName)\n          queue.unshift({ parent: current, context: context, subject: listSubject, listMapping: listMapping });\n        }\n        for (var child = current.lastChild; child; child = child.previousSibling) {\n          if (child.nodeType === Node.ELEMENT_NODE) {\n            // console.log(\"Pushing child \"+child.localName)\n            //child.baseURI = current.baseURI;\n            queue.unshift({ current: child, context: childContext });\n          }\n        }\n      }\n      if (this.inHTMLMode) {\n        this.copyProperties();\n      }\n      for (var _i15 = 0; _i15 < this.finishedHandlers.length; _i15++) {\n        this.finishedHandlers[_i15](node);\n      }\n    }\n  }, {\n    key: 'push',\n    value: function push(parent, subject) {\n      return {\n        parent: parent,\n        subject: subject ? subject : parent ? parent.subject : null,\n        parentObject: null,\n        incomplete: [],\n        listMapping: parent ? parent.listMapping : {},\n        language: parent ? parent.language : this.language,\n        prefixes: parent ? parent.prefixes : this.target.graph.prefixes,\n        terms: parent ? parent.terms : this.target.graph.terms,\n        vocabulary: parent ? parent.vocabulary : this.vocabulary\n      };\n    }\n  }, {\n    key: 'resolveAndNormalize',\n    value: function resolveAndNormalize(base, uri) {\n      // console.log(\"Joining \" + uri + \" to \" + base + \" making \" +  Uri.join(uri, base))\n      return Uri.join(uri, base); // @@ normalize?\n    }\n  }, {\n    key: 'setContext',\n    value: function setContext(node) {\n      // We only recognized XHTML+RDFa 1.1 if the version is set propertyly\n      if (node.localName === 'html' && node.getAttribute('version') === 'XHTML+RDFa 1.1') {\n        this.setXHTMLContext();\n      } else if (node.localName === 'html' || node.namespaceURI === 'http://www.w3.org/1999/xhtml') {\n        if (typeof document !== 'undefined' && document.doctype) {\n          if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.0//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd') {\n            console.log('WARNING: RDF 1.0 is not supported.  Defaulting to HTML5 mode.');\n            this.setHTMLContext();\n          } else if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.1//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd') {\n            this.setXHTMLContext();\n          } else {\n            this.setHTMLContext();\n          }\n        } else {\n          this.setHTMLContext();\n        }\n      } else {\n        this.setXMLContext();\n      }\n    }\n  }, {\n    key: 'setHTMLContext',\n    value: function setHTMLContext() {\n      this.setInitialContext();\n      this.langAttributes = [{\n        namespaceURI: 'http://www.w3.org/XML/1998/namespace',\n        localName: 'lang'\n      }, { namespaceURI: null, localName: 'lang' }];\n      this.inXHTMLMode = false;\n      this.inHTMLMode = true;\n    }\n  }, {\n    key: 'setInitialContext',\n    value: function setInitialContext() {\n      this.vocabulary = null;\n      // By default, the prefixes are terms are loaded to the RDFa 1.1. standard within the graph constructor\n      this.langAttributes = [{\n        namespaceURI: 'http://www.w3.org/XML/1998/namespace',\n        localName: 'lang'\n      }];\n    }\n  }, {\n    key: 'setXHTMLContext',\n    value: function setXHTMLContext() {\n      this.setInitialContext();\n      this.inXHTMLMode = true;\n      this.inHTMLMode = false;\n      this.langAttributes = [{\n        namespaceURI: 'http://www.w3.org/XML/1998/namespace',\n        localName: 'lang' }, { namespaceURI: null, localName: 'lang' }];\n      // From http://www.w3.org/2011/rdfa-context/xhtml-rdfa-1.1\n      this.target.graph.terms['alternate'] = 'http://www.w3.org/1999/xhtml/vocab#alternate';\n      this.target.graph.terms['appendix'] = 'http://www.w3.org/1999/xhtml/vocab#appendix';\n      this.target.graph.terms['bookmark'] = 'http://www.w3.org/1999/xhtml/vocab#bookmark';\n      this.target.graph.terms['cite'] = 'http://www.w3.org/1999/xhtml/vocab#cite';\n      this.target.graph.terms['chapter'] = 'http://www.w3.org/1999/xhtml/vocab#chapter';\n      this.target.graph.terms['contents'] = 'http://www.w3.org/1999/xhtml/vocab#contents';\n      this.target.graph.terms['copyright'] = 'http://www.w3.org/1999/xhtml/vocab#copyright';\n      this.target.graph.terms['first'] = 'http://www.w3.org/1999/xhtml/vocab#first';\n      this.target.graph.terms['glossary'] = 'http://www.w3.org/1999/xhtml/vocab#glossary';\n      this.target.graph.terms['help'] = 'http://www.w3.org/1999/xhtml/vocab#help';\n      this.target.graph.terms['icon'] = 'http://www.w3.org/1999/xhtml/vocab#icon';\n      this.target.graph.terms['index'] = 'http://www.w3.org/1999/xhtml/vocab#index';\n      this.target.graph.terms['last'] = 'http://www.w3.org/1999/xhtml/vocab#last';\n      this.target.graph.terms['license'] = 'http://www.w3.org/1999/xhtml/vocab#license';\n      this.target.graph.terms['meta'] = 'http://www.w3.org/1999/xhtml/vocab#meta';\n      this.target.graph.terms['next'] = 'http://www.w3.org/1999/xhtml/vocab#next';\n      this.target.graph.terms['prev'] = 'http://www.w3.org/1999/xhtml/vocab#prev';\n      this.target.graph.terms['previous'] = 'http://www.w3.org/1999/xhtml/vocab#previous';\n      this.target.graph.terms['section'] = 'http://www.w3.org/1999/xhtml/vocab#section';\n      this.target.graph.terms['stylesheet'] = 'http://www.w3.org/1999/xhtml/vocab#stylesheet';\n      this.target.graph.terms['subsection'] = 'http://www.w3.org/1999/xhtml/vocab#subsection';\n      this.target.graph.terms['start'] = 'http://www.w3.org/1999/xhtml/vocab#start';\n      this.target.graph.terms['top'] = 'http://www.w3.org/1999/xhtml/vocab#top';\n      this.target.graph.terms['up'] = 'http://www.w3.org/1999/xhtml/vocab#up';\n      this.target.graph.terms['p3pv1'] = 'http://www.w3.org/1999/xhtml/vocab#p3pv1';\n      // other\n      this.target.graph.terms['related'] = 'http://www.w3.org/1999/xhtml/vocab#related';\n      this.target.graph.terms['role'] = 'http://www.w3.org/1999/xhtml/vocab#role';\n      this.target.graph.terms['transformation'] = 'http://www.w3.org/1999/xhtml/vocab#transformation';\n    }\n  }, {\n    key: 'setXMLContext',\n    value: function setXMLContext() {\n      this.setInitialContext();\n      this.inXHTMLMode = false;\n      this.inHTMLMode = false;\n    }\n  }, {\n    key: 'tokenize',\n    value: function tokenize(str) {\n      return this.trim(str).split(/\\s+/);\n    }\n  }, {\n    key: 'toRDFNodeObject',\n    value: function toRDFNodeObject(x) {\n      if (typeof x === 'undefined') return undefined;\n      if (typeof x === 'string') {\n        if (x.substring(0, 2) === '_:') {\n          if (typeof this.blankNodes[x.substring(2)] === 'undefined') {\n            this.blankNodes[x.substring(2)] = new BlankNode(x.substring(2));\n          }\n          return this.blankNodes[x.substring(2)];\n        }\n        return rdf.namedNode(x);\n      }\n      switch (x.type) {\n        case RDFaProcessor.objectURI:\n          if (x.value.substring(0, 2) === '_:') {\n            if (typeof this.blankNodes[x.value.substring(2)] === 'undefined') {\n              this.blankNodes[x.value.substring(2)] = new BlankNode(x.value.substring(2));\n            }\n            return this.blankNodes[x.value.substring(2)];\n          }\n          return rdf.namedNode(x.value);\n        case RDFaProcessor.PlainLiteralURI:\n          return new Literal(x.value, x.language || '');\n        case RDFaProcessor.XMLLiteralURI:\n        case RDFaProcessor.HTMLLiteralURI:\n          var string = '';\n          Object.keys(x.value).forEach(function (i) {\n            string += Util.domToString(x.value[i], this.htmlOptions);\n          });\n          return new Literal(string, '', new NamedNode(x.type));\n        default:\n          return new Literal(x.value, '', new NamedNode(x.type));\n      }\n    }\n  }, {\n    key: 'trim',\n    value: function trim(str) {\n      return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n  }], [{\n    key: 'parseRDFaDOM',\n    value: function parseRDFaDOM(dom, kb, base) {\n      var p = new RDFaProcessor(kb, { 'base': base });\n      //dom.baseURI = base;\n      p.process(dom);\n    }\n  }]);\n\n  return RDFaProcessor;\n}();\n\nRDFaProcessor.XMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral';\nRDFaProcessor.HTMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML';\nRDFaProcessor.PlainLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral';\nRDFaProcessor.objectURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#object';\nRDFaProcessor.typeURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';\nRDFaProcessor.nameChar = \"[-A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF.0-9\\xB7\\u0300-\\u036F\\u203F-\\u2040]\";\nRDFaProcessor.nameStartChar = \"[A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF\\u0100-\\u0131\\u0134-\\u013E\\u0141-\\u0148\\u014A-\\u017E\\u0180-\\u01C3\\u01CD-\\u01F0\\u01F4-\\u01F5\\u01FA-\\u0217\\u0250-\\u02A8\\u02BB-\\u02C1\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03CE\\u03D0-\\u03D6\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2-\\u03F3\\u0401-\\u040C\\u040E-\\u044F\\u0451-\\u045C\\u045E-\\u0481\\u0490-\\u04C4\\u04C7-\\u04C8\\u04CB-\\u04CC\\u04D0-\\u04EB\\u04EE-\\u04F5\\u04F8-\\u04F9\\u0531-\\u0556\\u0559\\u0561-\\u0586\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A\\u0641-\\u064A\\u0671-\\u06B7\\u06BA-\\u06BE\\u06C0-\\u06CE\\u06D0-\\u06D3\\u06D5\\u06E5-\\u06E6\\u0905-\\u0939\\u093D\\u0958-\\u0961\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8B\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AE0\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B36-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB5\\u0BB7-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D60-\\u0D61\\u0E01-\\u0E2E\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EAE\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0F40-\\u0F47\\u0F49-\\u0F69\\u10A0-\\u10C5\\u10D0-\\u10F6\\u1100\\u1102-\\u1103\\u1105-\\u1107\\u1109\\u110B-\\u110C\\u110E-\\u1112\\u113C\\u113E\\u1140\\u114C\\u114E\\u1150\\u1154-\\u1155\\u1159\\u115F-\\u1161\\u1163\\u1165\\u1167\\u1169\\u116D-\\u116E\\u1172-\\u1173\\u1175\\u119E\\u11A8\\u11AB\\u11AE-\\u11AF\\u11B7-\\u11B8\\u11BA\\u11BC-\\u11C2\\u11EB\\u11F0\\u11F9\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126\\u212A-\\u212B\\u212E\\u2180-\\u2182\\u3041-\\u3094\\u30A1-\\u30FA\\u3105-\\u312C\\uAC00-\\uD7A3\\u4E00-\\u9FA5\\u3007\\u3021-\\u3029_]\";\nRDFaProcessor.NCNAME = new RegExp('^' + RDFaProcessor.nameStartChar + RDFaProcessor.nameChar + '*$');\n\n/*\r\nRDFaProcessor.prototype.resolveAndNormalize = function(base,href) {\r\n   var u = base.resolve(href)\r\n   var parsed = this.parseURI(u)\r\n   parsed.normalize()\r\n   return parsed.spec\r\n}\r\n*/\n\nRDFaProcessor.dateTimeTypes = [{ pattern: /-?P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\\.[0-9]+)?S)?)?/,\n  type: 'http://www.w3.org/2001/XMLSchema#duration' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9]T(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\\.[0-9]+)?(?:Z|[+\\-][0-9][0-9]:[0-9][0-9])?/,\n  type: 'http://www.w3.org/2001/XMLSchema#dateTime' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9](?:Z|[+\\-][0-9][0-9]:[0-9][0-9])?/,\n  type: 'http://www.w3.org/2001/XMLSchema#date' }, { pattern: /(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\\.[0-9]+)?(?:Z|[+\\-][0-9][0-9]:[0-9][0-9])?/,\n  type: 'http://www.w3.org/2001/XMLSchema#time' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]/,\n  type: 'http://www.w3.org/2001/XMLSchema#gYearMonth' }, { pattern: /-?[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9]/,\n  type: 'http://www.w3.org/2001/XMLSchema#gYear' }];\n\nmodule.exports = RDFaProcessor;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// GraphNode.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9641c3d910df8dc25913","module.exports = $rdf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"$rdf\"\n// module id = 0\n// module chunks = 0","var $rdf = require(\"rdflib\");\nvar fetch = require(\"node-fetch\");\nvar RDFaProcessor = require(\"./rdfa-processor-dirty-hack\");\n\n/**\n * Node Status:\n * \n * Locally undetermined: There are multiple local nodes satisfying the criteria specified for this object \n * Blank: The object represents a blank node in a graph that is locally available\n * Unresolved: This node is identified by a URI that has not yet been derefernced\n * \n * @type type\n */\n\nlet Headers = ((h) => h ? h : window.Headers)(fetch.Headers);\n\nfunction GraphNode() {\n    return new GraphNode.Impl(...arguments);\n}\n\nGraphNode.Impl = class {\n        \n        constructor(nodes, graph, sources) {\n            this._graph = graph;\n            if (Array.isArray(nodes)) {\n                this.nodes = nodes;\n                /*if (this.nodes.length === 0) {\n                    throw \"Can't represent empty set of nodes\";\n                }*/\n            } else {\n                this.nodes = [nodes];\n            }\n            this.sources = sources;\n        }\n        \n        get graph() {\n            if (!this._graph) {\n                throw Error(\"Operation not possible as no Graph is available, try fetching first\");\n            }\n            return this._graph;\n        }\n        \n        get node() {\n            if (this.nodes.length !== 1) {\n                throw Error(\"Operation not possible as this GraphNode is underdetermined\");\n            }\n            return this.nodes[0];\n        }\n        \n        get termType() {\n            return this.node.termType;\n        }\n        \n        get value() {;\n            return this.node.value;\n        }\n        \n        fetch() {\n            if ((this.termType !== \"NamedNode\") || \n                        (this.sources && this.sources.indexOf(this.value.split(\"#\")[0]) > -1)) {\n                return Promise.resolve(this);\n            } else {\n                //TODO extend existing graph?\n                var uri = this.value.split(\"#\")[0];\n                return GraphNode.rdfFetch(uri).then(response => response.graph()).then(graph => GraphNode(this.node, graph, [uri]));\n            }\n        }\n        \n        /*\n         * \n         * @param {type} f\n         * @returns {unresolved} a promise that is satisfied when all promises returned by f are resolved\n         */\n        each(f) {\n            var results = this.nodes.map(node => f(GraphNode([node], this.graph, this.sources)));\n            return Promise.all(results);\n        }\n        \n        fetchEach(f) {\n            var results = this.nodes.map(node => GraphNode([node], this.graph, this.sources).fetch().then(f));\n            return Promise.all(results);\n        }\n\n        /**\n         * Returns a GraphNode for each node represented by this GraphNode\n         */\n        split() {\n            return this.nodes.map(node => GraphNode([node], this.graph, this.sources));\n        }\n        \n        out(predicate) {\n            var nodes = this.graph.each(this.node, predicate);\n            /*if (nodes.length === 0) {\n                throw \"No property \"+predicate+\" on \"+this.node;\n            }*/\n            return GraphNode(nodes, this.graph, this.sources);\n        }\n        \n        in(predicate) {\n            var statements = this.graph.statementsMatching(undefined, predicate, this.node);\n            /*if (statements.length === 0) {\n                throw \"No property \"+predicate+\" pointing to \"+this.node;\n            }*/\n            return GraphNode(statements.map(statement => statement.subject), this.graph, this.sources);\n        }\n    }\n\n/**\n * \n * Fetches an RDF graph. If the server return 401 the login process will be \n * started upon which the fetch will be retried.\n *\n * @param uri {string} The URI to be fetched\n * @param options passed to $rdf.Fetcher\n * @param login {boolean} The login function to be called, optional\n *\n * @return {Promise<Response>} Response has a `graph`property with the rertived graph\n */\nGraphNode.rdfFetch = function(uri, options, login) {\n    function plainFetch(uri, init = {}) {\n        if (!init.headers) {\n            init.headers = new Headers();\n        }\n        if (!init.headers.get(\"Accept\")) {\n            init.headers.set(\"Accept\", \"text/turtle;q=1, application/n-triples;q=.9, \"+\n                \"application/rdf+xml;q=.8, application/ld+json;q=.7, */*;q=.1\");\n        }\n        return fetch(uri, init).then(response => {\n            if (response.ok) {\n                response.graph = () => new Promise((resolve, reject) => {\n                    let graph = $rdf.graph();\n                    let mediaType = response.headers.get(\"Content-type\").split(\";\")[0];\n                    return response.text().then(text => {\n                        if ((mediaType === \"text/html\")  && (typeof DOMParser !== 'undefined')) {\n                            console.log(\"Working around rdflib problem parsing RDFa in browser\");\n                            try {\n                                RDFaProcessor.parseRDFaDOM($rdf.Util.parseXML(text, { contentType: mediaType }), graph, uri);\n                            } catch(error) {\n                                reject(error);\n                                return;\n                            }\n                            resolve(graph);\n                        } else {\n                            $rdf.parse(text, graph, uri, mediaType, (error, graph) => {\n                                if (error) {\n                                    reject(error);\n                                } else {\n                                    resolve(graph);\n                                }\n                            });\n                        }\n                    });\n                });\n                return response;\n            } else {\n                return response;\n            }\n        });\n    };\n    var ggg = this;\n    return plainFetch(uri, options).then(function (response) {\n        if (response.status < 300) {\n            return response;\n        } else {\n            if (login && response.status === 401) {\n                console.log(\"Got 401 response, attempting to login\");\n                return login().then(function () {\n                    return ggg.rdfFetch(uri, options);\n                });\n            } else {\n                return response;\n            }\n        }\n    });\n};\n\nmodule.exports = GraphNode;\n\n\n\n// WEBPACK FOOTER //\n// ./js/GraphNode.js","module.exports = fetch;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fetch\"\n// module id = 2\n// module chunks = 0","//The defaut version never worked, this works sometimes\r\n\r\n'use strict';\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\n//  RDFa Parser for rdflib.js\r\n\r\n// Originally by: Alex Milowski\r\n// From https://github.com/alexmilowski/green-turtle\r\n// Converted: timbl 2015-08-25 not yet working\r\n// Added wrapper: csarven 2016-05-09 working\r\n\r\n// RDFaProcessor.prototype = new Object() // Was URIResolver\r\n\r\n// RDFaProcessor.prototype.constructor=RDFaProcessor\r\n\r\n// options.base = base URI    not really an option, shopuld always be set.\r\n//\r\nvar $rdf = require(\"rdflib\");\r\nvar BlankNode = $rdf.BlankNode;\r\nvar Literal = $rdf.Literal;\r\nvar rdf = $rdf.DataFactory;\r\nvar NamedNode = $rdf.NamedNode;\r\nvar Uri = $rdf.uri;\r\nvar Util = $rdf.Util;\r\n\r\nif (typeof Node === 'undefined') {\r\n  //  @@@@@@ Global. Interface to xmldom.\r\n  var Node = {\r\n    ELEMENT_NODE: 1,\r\n    ATTRIBUTE_NODE: 2,\r\n    TEXT_NODE: 3,\r\n    CDATA_SECTION_NODE: 4,\r\n    ENTITY_REFERENCE_NODE: 5,\r\n    ENTITY_NODE: 6,\r\n    PROCESSING_INSTRUCTION_NODE: 7,\r\n    COMMENT_NODE: 8,\r\n    DOCUMENT_NODE: 9,\r\n    DOCUMENT_TYPE_NODE: 10,\r\n    DOCUMENT_FRAGMENT_NODE: 11,\r\n    NOTATION_NODE: 12\r\n  };\r\n}\r\n\r\nvar RDFaProcessor = function () {\r\n  function RDFaProcessor(kb, options) {\r\n    _classCallCheck(this, RDFaProcessor);\r\n\r\n    this.options = options || {};\r\n    this.kb = kb;\r\n    this.target = options.target || {\r\n      graph: {\r\n        subjects: {},\r\n        prefixes: {},\r\n        terms: {}\r\n      }\r\n      // XXX: Added to track bnodes\r\n    };this.blankNodes = [];\r\n    // XXX: Added for normalisation\r\n    this.htmlOptions = {\r\n      'selfClosing': 'br img input area base basefont col colgroup source wbr isindex link meta param hr'\r\n    };\r\n    this.theOne = '_:' + new Date().getTime();\r\n    this.language = null;\r\n    this.vocabulary = null;\r\n    this.blankCounter = 0;\r\n    this.langAttributes = [{ namespaceURI: 'http://www.w3.org/XML/1998/namespace', localName: 'lang' }];\r\n    this.inXHTMLMode = false;\r\n    this.absURIRE = /[\\w\\_\\-]+:\\S+/;\r\n    this.finishedHandlers = [];\r\n    this.init();\r\n  }\r\n\r\n  _createClass(RDFaProcessor, [{\r\n    key: 'addTriple',\r\n    value: function addTriple(origin, subject, predicate, object) {\r\n      var su, ob, pr, or;\r\n      if (typeof subject === 'undefined') {\r\n        su = rdf.namedNode(this.options.base);\r\n      } else {\r\n        su = this.toRDFNodeObject(subject);\r\n      }\r\n      pr = this.toRDFNodeObject(predicate);\r\n      ob = this.toRDFNodeObject(object);\r\n      or = rdf.namedNode(this.options.base);\r\n      // console.log('Adding { ' + su + ' ' + pr + ' ' + ob + ' ' + or + ' }')\r\n      this.kb.add(su, pr, ob, or);\r\n    }\r\n  }, {\r\n    key: 'ancestorPath',\r\n    value: function ancestorPath(node) {\r\n      var path = '';\r\n      while (node && node.nodeType !== Node.DOCUMENT_NODE) {\r\n        path = '/' + node.localName + path;\r\n        node = node.parentNode;\r\n      }\r\n      return path;\r\n    }\r\n  }, {\r\n    key: 'copyMappings',\r\n    value: function copyMappings(mappings) {\r\n      var newMappings = {};\r\n      for (var k in mappings) {\r\n        newMappings[k] = mappings[k];\r\n      }\r\n      return newMappings;\r\n    }\r\n  }, {\r\n    key: 'copyProperties',\r\n    value: function copyProperties() {}\r\n  }, {\r\n    key: 'deriveDateTimeType',\r\n    value: function deriveDateTimeType(value) {\r\n      for (var i = 0; i < RDFaProcessor.dateTimeTypes.length; i++) {\r\n        // console.log(\"Checking \"+value+\" against \"+RDFaProcessor.dateTimeTypes[i].type)\r\n        var matched = RDFaProcessor.dateTimeTypes[i].pattern.exec(value);\r\n        if (matched && matched[0].length === value.length) {\r\n          // console.log(\"Matched!\")\r\n          return RDFaProcessor.dateTimeTypes[i].type;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }, {\r\n    key: 'init',\r\n    value: function init() {}\r\n  }, {\r\n    key: 'newBlankNode',\r\n    value: function newBlankNode() {\r\n      this.blankCounter++;\r\n      return '_:' + this.blankCounter;\r\n    }\r\n  }, {\r\n    key: 'newSubjectOrigin',\r\n    value: function newSubjectOrigin(origin, subject) {}\r\n  }, {\r\n    key: 'parseCURIE',\r\n    value: function parseCURIE(value, prefixes, base) {\r\n      var colon = value.indexOf(':');\r\n      var uri;\r\n      if (colon >= 0) {\r\n        var prefix = value.substring(0, colon);\r\n        if (prefix === '') {\r\n          // default prefix\r\n          uri = prefixes[''];\r\n          return uri ? uri + value.substring(colon + 1) : null;\r\n        } else if (prefix === '_') {\r\n          // blank node\r\n          return '_:' + value.substring(colon + 1);\r\n        } else if (RDFaProcessor.NCNAME.test(prefix)) {\r\n          uri = prefixes[prefix];\r\n          if (uri) {\r\n            return uri + value.substring(colon + 1);\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }, {\r\n    key: 'parseCURIEOrURI',\r\n    value: function parseCURIEOrURI(value, prefixes, base) {\r\n      var curie = this.parseCURIE(value, prefixes, base);\r\n      if (curie) {\r\n        return curie;\r\n      }\r\n      return this.resolveAndNormalize(base, value);\r\n    }\r\n  }, {\r\n    key: 'parsePredicate',\r\n    value: function parsePredicate(value, defaultVocabulary, terms, prefixes, base, ignoreTerms) {\r\n      if (value === '') {\r\n        return null;\r\n      }\r\n      var predicate = this.parseTermOrCURIEOrAbsURI(value, defaultVocabulary, ignoreTerms ? null : terms, prefixes, base);\r\n      if (predicate && predicate.indexOf('_:') === 0) {\r\n        return null;\r\n      }\r\n      return predicate;\r\n    }\r\n  }, {\r\n    key: 'parsePrefixMappings',\r\n    value: function parsePrefixMappings(str, target) {\r\n      var values = this.tokenize(str);\r\n      var prefix = null;\r\n      // var uri = null\r\n      for (var i = 0; i < values.length; i++) {\r\n        if (values[i][values[i].length - 1] === ':') {\r\n          prefix = values[i].substring(0, values[i].length - 1);\r\n        } else if (prefix) {\r\n          target[prefix] = this.options.base ? Uri.join(values[i], this.options.base) : values[i];\r\n          prefix = null;\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: 'parseSafeCURIEOrCURIEOrURI',\r\n    value: function parseSafeCURIEOrCURIEOrURI(value, prefixes, base) {\r\n      value = this.trim(value);\r\n      if (value.charAt(0) === '[' && value.charAt(value.length - 1) === ']') {\r\n        value = value.substring(1, value.length - 1);\r\n        value = value.trim(value);\r\n        if (value.length === 0) {\r\n          return null;\r\n        }\r\n        if (value === '_:') {\r\n          // the one node\r\n          return this.theOne;\r\n        }\r\n        return this.parseCURIE(value, prefixes, base);\r\n      } else {\r\n        return this.parseCURIEOrURI(value, prefixes, base);\r\n      }\r\n    }\r\n  }, {\r\n    key: 'parseTermOrCURIEOrAbsURI',\r\n    value: function parseTermOrCURIEOrAbsURI(value, defaultVocabulary, terms, prefixes, base) {\r\n      // alert(\"Parsing \"+value+\" with default vocab \"+defaultVocabulary)\r\n      value = this.trim(value);\r\n      var curie = this.parseCURIE(value, prefixes, base);\r\n      if (curie) {\r\n        return curie;\r\n      } else if (terms) {\r\n        if (defaultVocabulary && !this.absURIRE.exec(value)) {\r\n          return defaultVocabulary + value;\r\n        }\r\n        var term = terms[value];\r\n        if (term) {\r\n          return term;\r\n        }\r\n        var lcvalue = value.toLowerCase();\r\n        term = terms[lcvalue];\r\n        if (term) {\r\n          return term;\r\n        }\r\n      }\r\n      if (this.absURIRE.exec(value)) {\r\n        return this.resolveAndNormalize(base, value);\r\n      }\r\n      return null;\r\n    }\r\n  }, {\r\n    key: 'parseTermOrCURIEOrURI',\r\n    value: function parseTermOrCURIEOrURI(value, defaultVocabulary, terms, prefixes, base) {\r\n      // alert(\"Parsing \"+value+\" with default vocab \"+defaultVocabulary)\r\n      value = this.trim(value);\r\n      var curie = this.parseCURIE(value, prefixes, base);\r\n      if (curie) {\r\n        return curie;\r\n      } else {\r\n        var term = terms[value];\r\n        if (term) {\r\n          return term;\r\n        }\r\n        var lcvalue = value.toLowerCase();\r\n        term = terms[lcvalue];\r\n        if (term) {\r\n          return term;\r\n        }\r\n        if (defaultVocabulary && !this.absURIRE.exec(value)) {\r\n          return defaultVocabulary + value;\r\n        }\r\n      }\r\n      return this.resolveAndNormalize(base, value);\r\n    }\r\n  }, {\r\n    key: 'parseURI',\r\n    value: function parseURI(uri) {\r\n      return uri; // We just use strings as URIs, not objects now.\r\n    }\r\n  }, {\r\n    key: 'process',\r\n    value: function process(node, options) {\r\n      /*\r\n      if (!window.console) {\r\n         window.console = { log: function() {} }\r\n      }*/\r\n      var base;\r\n      if (node.nodeType === Node.DOCUMENT_NODE) {\r\n        base = node.baseURI;\r\n        node = node.documentElement;\r\n        //node.baseURI = base;\r\n        this.setContext(node);\r\n      } else if (node.parentNode.nodeType === Node.DOCUMENT_NODE) {\r\n        this.setContext(node);\r\n      }\r\n      var queue = [];\r\n      // Fix for Firefox that includes the hash in the base URI\r\n      var removeHash = function removeHash(baseURI) {\r\n        // Fix for undefined baseURI property\r\n        if (!baseURI && options && options.baseURI) {\r\n          return options.baseURI;\r\n        }\r\n\r\n        var hash = baseURI.indexOf('#');\r\n        if (hash >= 0) {\r\n          baseURI = baseURI.substring(0, hash);\r\n        }\r\n        if (options && options.baseURIMap) {\r\n          baseURI = options.baseURIMap(baseURI);\r\n        }\r\n        return baseURI;\r\n      };\r\n      queue.push({ current: node,\r\n        context: this.push(null, removeHash(node.baseURI))\r\n      });\r\n      while (queue.length > 0) {\r\n        var item = queue.shift();\r\n        if (item.parent) {\r\n          // Sequence Step 14: list triple generation\r\n          if (item.context.parent && item.context.parent.listMapping === item.listMapping) {\r\n            // Skip a child context with exactly the same mapping\r\n            continue;\r\n          }\r\n          // console.log(\"Generating lists for \"+item.subject+\", tag \"+item.parent.localName)\r\n          for (var _predicate in item.listMapping) {\r\n            var list = item.listMapping[_predicate];\r\n            if (list.length === 0) {\r\n              this.addTriple(item.parent, item.subject, _predicate, { type: RDFaProcessor.objectURI, value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' });\r\n              continue;\r\n            }\r\n            var bnodes = [];\r\n            for (var _i = 0; _i < list.length; _i++) {\r\n              bnodes.push(this.newBlankNode());\r\n              // this.newSubject(item.parent,bnodes[i])\r\n            }\r\n            for (var _i2 = 0; _i2 < bnodes.length; _i2++) {\r\n              this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#first', list[_i2]);\r\n              this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest', { type: RDFaProcessor.objectURI, value: _i2 + 1 < bnodes.length ? bnodes[_i2 + 1] : 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' });\r\n            }\r\n            this.addTriple(item.parent, item.subject, _predicate, { type: RDFaProcessor.objectURI, value: bnodes[0] });\r\n          }\r\n          continue;\r\n        }\r\n        var current = item.current;\r\n        var context = item.context;\r\n        // console.log(\"Tag: \"+current.localName+\", listMapping=\"+JSON.stringify(context.listMapping))\r\n        // Sequence Step 1\r\n        var skip = false;\r\n        var newSubject = null;\r\n        var currentObjectResource = null;\r\n        var typedResource = null;\r\n        var prefixes = context.prefixes;\r\n        var prefixesCopied = false;\r\n        var incomplete = [];\r\n        var listMapping = context.listMapping;\r\n        var listMappingDifferent = !context.parent;\r\n        var language = context.language;\r\n        var vocabulary = context.vocabulary;\r\n        // TODO: the \"base\" element may be used for HTML+RDFa 1.1\r\n        base = this.parseURI(removeHash(current.baseURI));\r\n        current.item = null;\r\n        // Sequence Step 2: set the default vocabulary\r\n        var vocabAtt = current.getAttributeNode('vocab');\r\n        if (vocabAtt) {\r\n          var value = this.trim(vocabAtt.value);\r\n          if (value.length > 0) {\r\n            vocabulary = value;\r\n            var baseSubject = base.spec;\r\n            // this.newSubject(current,baseSubject)\r\n            this.addTriple(current, baseSubject, 'http://www.w3.org/ns/rdfa#usesVocabulary', { type: RDFaProcessor.objectURI, value: vocabulary });\r\n          } else {\r\n            vocabulary = this.vocabulary;\r\n          }\r\n        }\r\n        // Sequence Step 3: IRI mappings\r\n        // handle xmlns attributes\r\n        for (var i = 0; i < current.attributes.length; i++) {\r\n          var att = current.attributes[i];\r\n          // if (att.namespaceURI==\"http://www.w3.org/2000/xmlns/\") {\r\n          if (att.nodeName.charAt(0) === 'x' && att.nodeName.indexOf('xmlns:') === 0) {\r\n            if (!prefixesCopied) {\r\n              prefixes = this.copyMappings(prefixes);\r\n              prefixesCopied = true;\r\n            }\r\n            var prefix = att.nodeName.substring(6);\r\n            // TODO: resolve relative?\r\n            var ref = this.trim(att.value);\r\n            prefixes[prefix] = this.options.base ? Uri.join(ref, this.options.base) : ref;\r\n          }\r\n        }\r\n        // Handle prefix mappings (@prefix)\r\n        var prefixAtt = current.getAttributeNode('prefix');\r\n        if (prefixAtt) {\r\n          if (!prefixesCopied) {\r\n            prefixes = this.copyMappings(prefixes);\r\n            prefixesCopied = true;\r\n          }\r\n          this.parsePrefixMappings(prefixAtt.value, prefixes);\r\n        }\r\n        // Sequence Step 4: language\r\n        var xmlLangAtt = null;\r\n        for (var _i3 = 0; !xmlLangAtt && _i3 < this.langAttributes.length; _i3++) {\r\n          xmlLangAtt = current.getAttributeNodeNS(this.langAttributes[_i3].namespaceURI, this.langAttributes[_i3].localName);\r\n        }\r\n        if (xmlLangAtt) {\r\n          var _value = this.trim(xmlLangAtt.value);\r\n          if (_value.length > 0) {\r\n            language = _value;\r\n          } else {\r\n            language = null;\r\n          }\r\n        }\r\n        var relAtt = current.getAttributeNode('rel');\r\n        var revAtt = current.getAttributeNode('rev');\r\n        var typeofAtt = current.getAttributeNode('typeof');\r\n        var propertyAtt = current.getAttributeNode('property');\r\n        var datatypeAtt = current.getAttributeNode('datatype');\r\n        var datetimeAtt = this.inHTMLMode ? current.getAttributeNode('datetime') : null;\r\n        var contentAtt = current.getAttributeNode('content');\r\n        var aboutAtt = current.getAttributeNode('about');\r\n        var srcAtt = current.getAttributeNode('src');\r\n        var resourceAtt = current.getAttributeNode('resource');\r\n        var hrefAtt = current.getAttributeNode('href');\r\n        var inlistAtt = current.getAttributeNode('inlist');\r\n        var relAttPredicates = [];\r\n        var predicate, values;\r\n        if (relAtt) {\r\n          values = this.tokenize(relAtt.value);\r\n          for (var _i4 = 0; _i4 < values.length; _i4++) {\r\n            predicate = this.parsePredicate(values[_i4], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt !== null);\r\n            if (predicate) {\r\n              relAttPredicates.push(predicate);\r\n            }\r\n          }\r\n        }\r\n        var revAttPredicates = [];\r\n        if (revAtt) {\r\n          values = this.tokenize(revAtt.value);\r\n          for (var _i5 = 0; _i5 < values.length; _i5++) {\r\n            predicate = this.parsePredicate(values[_i5], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt);\r\n            if (predicate) {\r\n              revAttPredicates.push(predicate);\r\n            }\r\n          }\r\n        }\r\n        // Section 3.1, bullet 7\r\n        if (this.inHTMLMode && (relAtt || revAtt) && propertyAtt) {\r\n          if (relAttPredicates.length === 0) {\r\n            relAtt = null;\r\n          }\r\n          if (revAttPredicates.length === 0) {\r\n            revAtt = null;\r\n          }\r\n        }\r\n        if (relAtt || revAtt) {\r\n          // Sequence Step 6: establish new subject and value\r\n          if (aboutAtt) {\r\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);\r\n          }\r\n          if (typeofAtt) {\r\n            typedResource = newSubject;\r\n          }\r\n          if (!newSubject) {\r\n            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) {\r\n              newSubject = removeHash(current.baseURI);\r\n            } else if (context.parentObject) {\r\n              // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI\r\n              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\r\n            }\r\n          }\r\n          if (resourceAtt) {\r\n            currentObjectResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\r\n          }\r\n          if (!currentObjectResource) {\r\n            if (hrefAtt) {\r\n              currentObjectResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\r\n            } else if (srcAtt) {\r\n              currentObjectResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\r\n            } else if (typeofAtt && !aboutAtt && !(this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body'))) {\r\n              currentObjectResource = this.newBlankNode();\r\n            }\r\n          }\r\n          if (typeofAtt && !aboutAtt && this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body')) {\r\n            typedResource = newSubject;\r\n          } else if (typeofAtt && !aboutAtt) {\r\n            typedResource = currentObjectResource;\r\n          }\r\n        } else if (propertyAtt && !contentAtt && !datatypeAtt) {\r\n          // Sequence Step 5.1: establish a new subject\r\n          if (aboutAtt) {\r\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);\r\n            if (typeofAtt) {\r\n              typedResource = newSubject;\r\n            }\r\n          }\r\n          if (!newSubject && current.parentNode.nodeType === Node.DOCUMENT_NODE) {\r\n            newSubject = removeHash(current.baseURI);\r\n            if (typeofAtt) {\r\n              typedResource = newSubject;\r\n            }\r\n          } else if (!newSubject && context.parentObject) {\r\n            // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI\r\n            newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\r\n          }\r\n          if (typeofAtt && !typedResource) {\r\n            if (resourceAtt) {\r\n              typedResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\r\n            }\r\n            if (!typedResource && hrefAtt) {\r\n              typedResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\r\n            }\r\n            if (!typedResource && srcAtt) {\r\n              typedResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\r\n            }\r\n            if (!typedResource && (this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) {\r\n              typedResource = newSubject;\r\n            }\r\n            if (!typedResource) {\r\n              typedResource = this.newBlankNode();\r\n            }\r\n            currentObjectResource = typedResource;\r\n          }\r\n          // console.log(current.localName+\", newSubject=\"+newSubject+\", typedResource=\"+typedResource+\", currentObjectResource=\"+currentObjectResource)\r\n        } else {\r\n          // Sequence Step 5.2: establish a new subject\r\n          if (aboutAtt) {\r\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);\r\n          }\r\n          if (!newSubject && resourceAtt) {\r\n            newSubject = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\r\n          }\r\n          if (!newSubject && hrefAtt) {\r\n            newSubject = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\r\n          }\r\n          if (!newSubject && srcAtt) {\r\n            newSubject = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\r\n          }\r\n          if (!newSubject) {\r\n            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) {\r\n              newSubject = removeHash(current.baseURI);\r\n            } else if ((this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) {\r\n              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\r\n            } else if (typeofAtt) {\r\n              newSubject = this.newBlankNode();\r\n            } else if (context.parentObject) {\r\n              // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI\r\n              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\r\n              if (!propertyAtt) {\r\n                skip = true;\r\n              }\r\n            }\r\n          }\r\n          if (typeofAtt) {\r\n            typedResource = newSubject;\r\n          }\r\n        }\r\n        // console.log(current.tagName+\": newSubject=\"+newSubject+\", currentObjectResource=\"+currentObjectResource+\", typedResource=\"+typedResource+\", skip=\"+skip)\r\n        // var rdfaData = null\r\n        if (newSubject) {\r\n          // this.newSubject(current,newSubject)\r\n          if (aboutAtt || resourceAtt || typedResource) {\r\n            var id = newSubject;\r\n            if (typeofAtt && !aboutAtt && !resourceAtt && currentObjectResource) {\r\n              id = currentObjectResource;\r\n            }\r\n            // console.log(\"Setting data attribute for \"+current.localName+\" for subject \"+id)\r\n            this.newSubjectOrigin(current, id);\r\n          }\r\n        }\r\n        // Sequence Step 7: generate type triple\r\n        if (typedResource) {\r\n          values = this.tokenize(typeofAtt.value);\r\n          for (var _i6 = 0; _i6 < values.length; _i6++) {\r\n            var object = this.parseTermOrCURIEOrAbsURI(values[_i6], vocabulary, context.terms, prefixes, base);\r\n            if (object) {\r\n              this.addTriple(current, typedResource, RDFaProcessor.typeURI, { type: RDFaProcessor.objectURI, value: object });\r\n            }\r\n          }\r\n        }\r\n        // Sequence Step 8: new list mappings if there is a new subject\r\n        // console.log(\"Step 8: newSubject=\"+newSubject+\", context.parentObject=\"+context.parentObject)\r\n        if (newSubject && newSubject !== context.parentObject) {\r\n          // console.log(\"Generating new list mapping for \"+newSubject)\r\n          listMapping = {};\r\n          listMappingDifferent = true;\r\n        }\r\n        // Sequence Step 9: generate object triple\r\n        if (currentObjectResource) {\r\n          if (relAtt && inlistAtt) {\r\n            for (var _i7 = 0; _i7 < relAttPredicates.length; _i7++) {\r\n              var _list = listMapping[relAttPredicates[_i7]];\r\n              if (!_list) {\r\n                _list = [];\r\n                listMapping[relAttPredicates[_i7]] = _list;\r\n              }\r\n              _list.push({ type: RDFaProcessor.objectURI, value: currentObjectResource });\r\n            }\r\n          } else if (relAtt) {\r\n            for (var _i8 = 0; _i8 < relAttPredicates.length; _i8++) {\r\n              this.addTriple(current, newSubject, relAttPredicates[_i8], { type: RDFaProcessor.objectURI, value: currentObjectResource });\r\n            }\r\n          }\r\n          if (revAtt) {\r\n            for (var _i9 = 0; _i9 < revAttPredicates.length; _i9++) {\r\n              this.addTriple(current, currentObjectResource, revAttPredicates[_i9], { type: RDFaProcessor.objectURI, value: newSubject });\r\n            }\r\n          }\r\n        } else {\r\n          // Sequence Step 10: incomplete triples\r\n          if (newSubject && !currentObjectResource && (relAtt || revAtt)) {\r\n            currentObjectResource = this.newBlankNode();\r\n            // alert(current.tagName+\": generated blank node, newSubject=\"+newSubject+\" currentObjectResource=\"+currentObjectResource)\r\n          }\r\n          if (relAtt && inlistAtt) {\r\n            for (var _i10 = 0; _i10 < relAttPredicates.length; _i10++) {\r\n              var _list2 = listMapping[relAttPredicates[_i10]];\r\n              if (!_list2) {\r\n                _list2 = [];\r\n                listMapping[predicate] = _list2;\r\n              }\r\n              // console.log(\"Adding incomplete list for \"+predicate)\r\n              incomplete.push({ predicate: relAttPredicates[_i10], list: _list2 });\r\n            }\r\n          } else if (relAtt) {\r\n            for (var _i11 = 0; _i11 < relAttPredicates.length; _i11++) {\r\n              incomplete.push({ predicate: relAttPredicates[_i11], forward: true });\r\n            }\r\n          }\r\n          if (revAtt) {\r\n            for (var _i12 = 0; _i12 < revAttPredicates.length; _i12++) {\r\n              incomplete.push({ predicate: revAttPredicates[_i12], forward: false });\r\n            }\r\n          }\r\n        }\r\n        // Step 11: Current property values\r\n        if (propertyAtt) {\r\n          var datatype = null;\r\n          var content = null;\r\n          if (datatypeAtt) {\r\n            datatype = datatypeAtt.value === '' ? RDFaProcessor.PlainLiteralURI : this.parseTermOrCURIEOrAbsURI(datatypeAtt.value, vocabulary, context.terms, prefixes, base);\r\n            if (datetimeAtt && !contentAtt) {\r\n              content = datetimeAtt.value;\r\n            } else {\r\n              content = datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI ? null : contentAtt ? contentAtt.value : current.textContent;\r\n            }\r\n          } else if (contentAtt) {\r\n            datatype = RDFaProcessor.PlainLiteralURI;\r\n            content = contentAtt.value;\r\n          } else if (datetimeAtt) {\r\n            content = datetimeAtt.value;\r\n            datatype = RDFaProcessor.deriveDateTimeType(content);\r\n            if (!datatype) {\r\n              datatype = RDFaProcessor.PlainLiteralURI;\r\n            }\r\n          } else if (!relAtt && !revAtt) {\r\n            if (resourceAtt) {\r\n              content = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);\r\n            }\r\n            if (!content && hrefAtt) {\r\n              content = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));\r\n            } else if (!content && srcAtt) {\r\n              content = this.resolveAndNormalize(base, encodeURI(srcAtt.value));\r\n            }\r\n            if (content) {\r\n              datatype = RDFaProcessor.objectURI;\r\n            }\r\n          }\r\n          if (!datatype) {\r\n            if (typeofAtt && !aboutAtt) {\r\n              datatype = RDFaProcessor.objectURI;\r\n              content = typedResource;\r\n            } else {\r\n              content = current.textContent;\r\n              if (this.inHTMLMode && current.localName === 'time') {\r\n                datatype = RDFaProcessor.deriveDateTimeType(content);\r\n              }\r\n              if (!datatype) {\r\n                datatype = RDFaProcessor.PlainLiteralURI;\r\n              }\r\n            }\r\n          }\r\n          values = this.tokenize(propertyAtt.value);\r\n          for (var _i13 = 0; _i13 < values.length; _i13++) {\r\n            var _predicate2 = this.parsePredicate(values[_i13], vocabulary, context.terms, prefixes, base);\r\n            if (_predicate2) {\r\n              if (inlistAtt) {\r\n                var _list3 = listMapping[_predicate2];\r\n                if (!_list3) {\r\n                  _list3 = [];\r\n                  listMapping[_predicate2] = _list3;\r\n                }\r\n                _list3.push(datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI ? { type: datatype, value: current.childNodes } : { type: datatype ? datatype : RDFaProcessor.PlainLiteralURI, value: content, language: language });\r\n              } else {\r\n                if (datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI) {\r\n                  this.addTriple(current, newSubject, _predicate2, { type: datatype, value: current.childNodes });\r\n                } else {\r\n                  this.addTriple(current, newSubject, _predicate2, { type: datatype ? datatype : RDFaProcessor.PlainLiteralURI, value: content, language: language });\r\n                  // console.log(newSubject+\" \"+predicate+\"=\"+content)\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // Sequence Step 12: complete incomplete triples with new subject\r\n        if (newSubject && !skip) {\r\n          for (var _i14 = 0; _i14 < context.incomplete.length; _i14++) {\r\n            if (context.incomplete[_i14].list) {\r\n              // console.log(\"Adding subject \"+newSubject+\" to list for \"+context.incomplete[i].predicate)\r\n              // TODO: it is unclear what to do here\r\n              context.incomplete[_i14].list.push({ type: RDFaProcessor.objectURI, value: newSubject });\r\n            } else if (context.incomplete[_i14].forward) {\r\n              // console.log(current.tagName+\": completing forward triple \"+context.incomplete[i].predicate+\" with object=\"+newSubject)\r\n              this.addTriple(current, context.subject, context.incomplete[_i14].predicate, { type: RDFaProcessor.objectURI, value: newSubject });\r\n            } else {\r\n              // console.log(current.tagName+\": completing reverse triple with object=\"+context.subject)\r\n              this.addTriple(current, newSubject, context.incomplete[_i14].predicate, { type: RDFaProcessor.objectURI, value: context.subject });\r\n            }\r\n          }\r\n        }\r\n        var childContext = null;\r\n        var listSubject = newSubject;\r\n        if (skip) {\r\n          // TODO: should subject be null?\r\n          childContext = this.push(context, context.subject);\r\n          // TODO: should the entObject be passed along?  If not, then intermediary children will keep properties from being associated with incomplete triples.\r\n          // TODO: Verify: if the current baseURI has changed and the parentObject is the parent's base URI, then the baseURI should change\r\n          childContext.parentObject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;\r\n          childContext.incomplete = context.incomplete;\r\n          childContext.language = language;\r\n          childContext.prefixes = prefixes;\r\n          childContext.vocabulary = vocabulary;\r\n        } else {\r\n          childContext = this.push(context, newSubject);\r\n          childContext.parentObject = currentObjectResource ? currentObjectResource : newSubject ? newSubject : context.subject;\r\n          childContext.prefixes = prefixes;\r\n          childContext.incomplete = incomplete;\r\n          if (currentObjectResource) {\r\n            // console.log(\"Generating new list mapping for \"+currentObjectResource)\r\n            listSubject = currentObjectResource;\r\n            listMapping = {};\r\n            listMappingDifferent = true;\r\n          }\r\n          childContext.listMapping = listMapping;\r\n          childContext.language = language;\r\n          childContext.vocabulary = vocabulary;\r\n        }\r\n        if (listMappingDifferent) {\r\n          // console.log(\"Pushing list parent \"+current.localName)\r\n          queue.unshift({ parent: current, context: context, subject: listSubject, listMapping: listMapping });\r\n        }\r\n        for (var child = current.lastChild; child; child = child.previousSibling) {\r\n          if (child.nodeType === Node.ELEMENT_NODE) {\r\n            // console.log(\"Pushing child \"+child.localName)\r\n            //child.baseURI = current.baseURI;\r\n            queue.unshift({ current: child, context: childContext });\r\n          }\r\n        }\r\n      }\r\n      if (this.inHTMLMode) {\r\n        this.copyProperties();\r\n      }\r\n      for (var _i15 = 0; _i15 < this.finishedHandlers.length; _i15++) {\r\n        this.finishedHandlers[_i15](node);\r\n      }\r\n    }\r\n  }, {\r\n    key: 'push',\r\n    value: function push(parent, subject) {\r\n      return {\r\n        parent: parent,\r\n        subject: subject ? subject : parent ? parent.subject : null,\r\n        parentObject: null,\r\n        incomplete: [],\r\n        listMapping: parent ? parent.listMapping : {},\r\n        language: parent ? parent.language : this.language,\r\n        prefixes: parent ? parent.prefixes : this.target.graph.prefixes,\r\n        terms: parent ? parent.terms : this.target.graph.terms,\r\n        vocabulary: parent ? parent.vocabulary : this.vocabulary\r\n      };\r\n    }\r\n  }, {\r\n    key: 'resolveAndNormalize',\r\n    value: function resolveAndNormalize(base, uri) {\r\n      // console.log(\"Joining \" + uri + \" to \" + base + \" making \" +  Uri.join(uri, base))\r\n      return Uri.join(uri, base); // @@ normalize?\r\n    }\r\n  }, {\r\n    key: 'setContext',\r\n    value: function setContext(node) {\r\n      // We only recognized XHTML+RDFa 1.1 if the version is set propertyly\r\n      if (node.localName === 'html' && node.getAttribute('version') === 'XHTML+RDFa 1.1') {\r\n        this.setXHTMLContext();\r\n      } else if (node.localName === 'html' || node.namespaceURI === 'http://www.w3.org/1999/xhtml') {\r\n        if (typeof document !== 'undefined' && document.doctype) {\r\n          if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.0//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd') {\r\n            console.log('WARNING: RDF 1.0 is not supported.  Defaulting to HTML5 mode.');\r\n            this.setHTMLContext();\r\n          } else if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.1//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd') {\r\n            this.setXHTMLContext();\r\n          } else {\r\n            this.setHTMLContext();\r\n          }\r\n        } else {\r\n          this.setHTMLContext();\r\n        }\r\n      } else {\r\n        this.setXMLContext();\r\n      }\r\n    }\r\n  }, {\r\n    key: 'setHTMLContext',\r\n    value: function setHTMLContext() {\r\n      this.setInitialContext();\r\n      this.langAttributes = [{\r\n        namespaceURI: 'http://www.w3.org/XML/1998/namespace',\r\n        localName: 'lang'\r\n      }, { namespaceURI: null, localName: 'lang' }];\r\n      this.inXHTMLMode = false;\r\n      this.inHTMLMode = true;\r\n    }\r\n  }, {\r\n    key: 'setInitialContext',\r\n    value: function setInitialContext() {\r\n      this.vocabulary = null;\r\n      // By default, the prefixes are terms are loaded to the RDFa 1.1. standard within the graph constructor\r\n      this.langAttributes = [{\r\n        namespaceURI: 'http://www.w3.org/XML/1998/namespace',\r\n        localName: 'lang'\r\n      }];\r\n    }\r\n  }, {\r\n    key: 'setXHTMLContext',\r\n    value: function setXHTMLContext() {\r\n      this.setInitialContext();\r\n      this.inXHTMLMode = true;\r\n      this.inHTMLMode = false;\r\n      this.langAttributes = [{\r\n        namespaceURI: 'http://www.w3.org/XML/1998/namespace',\r\n        localName: 'lang' }, { namespaceURI: null, localName: 'lang' }];\r\n      // From http://www.w3.org/2011/rdfa-context/xhtml-rdfa-1.1\r\n      this.target.graph.terms['alternate'] = 'http://www.w3.org/1999/xhtml/vocab#alternate';\r\n      this.target.graph.terms['appendix'] = 'http://www.w3.org/1999/xhtml/vocab#appendix';\r\n      this.target.graph.terms['bookmark'] = 'http://www.w3.org/1999/xhtml/vocab#bookmark';\r\n      this.target.graph.terms['cite'] = 'http://www.w3.org/1999/xhtml/vocab#cite';\r\n      this.target.graph.terms['chapter'] = 'http://www.w3.org/1999/xhtml/vocab#chapter';\r\n      this.target.graph.terms['contents'] = 'http://www.w3.org/1999/xhtml/vocab#contents';\r\n      this.target.graph.terms['copyright'] = 'http://www.w3.org/1999/xhtml/vocab#copyright';\r\n      this.target.graph.terms['first'] = 'http://www.w3.org/1999/xhtml/vocab#first';\r\n      this.target.graph.terms['glossary'] = 'http://www.w3.org/1999/xhtml/vocab#glossary';\r\n      this.target.graph.terms['help'] = 'http://www.w3.org/1999/xhtml/vocab#help';\r\n      this.target.graph.terms['icon'] = 'http://www.w3.org/1999/xhtml/vocab#icon';\r\n      this.target.graph.terms['index'] = 'http://www.w3.org/1999/xhtml/vocab#index';\r\n      this.target.graph.terms['last'] = 'http://www.w3.org/1999/xhtml/vocab#last';\r\n      this.target.graph.terms['license'] = 'http://www.w3.org/1999/xhtml/vocab#license';\r\n      this.target.graph.terms['meta'] = 'http://www.w3.org/1999/xhtml/vocab#meta';\r\n      this.target.graph.terms['next'] = 'http://www.w3.org/1999/xhtml/vocab#next';\r\n      this.target.graph.terms['prev'] = 'http://www.w3.org/1999/xhtml/vocab#prev';\r\n      this.target.graph.terms['previous'] = 'http://www.w3.org/1999/xhtml/vocab#previous';\r\n      this.target.graph.terms['section'] = 'http://www.w3.org/1999/xhtml/vocab#section';\r\n      this.target.graph.terms['stylesheet'] = 'http://www.w3.org/1999/xhtml/vocab#stylesheet';\r\n      this.target.graph.terms['subsection'] = 'http://www.w3.org/1999/xhtml/vocab#subsection';\r\n      this.target.graph.terms['start'] = 'http://www.w3.org/1999/xhtml/vocab#start';\r\n      this.target.graph.terms['top'] = 'http://www.w3.org/1999/xhtml/vocab#top';\r\n      this.target.graph.terms['up'] = 'http://www.w3.org/1999/xhtml/vocab#up';\r\n      this.target.graph.terms['p3pv1'] = 'http://www.w3.org/1999/xhtml/vocab#p3pv1';\r\n      // other\r\n      this.target.graph.terms['related'] = 'http://www.w3.org/1999/xhtml/vocab#related';\r\n      this.target.graph.terms['role'] = 'http://www.w3.org/1999/xhtml/vocab#role';\r\n      this.target.graph.terms['transformation'] = 'http://www.w3.org/1999/xhtml/vocab#transformation';\r\n    }\r\n  }, {\r\n    key: 'setXMLContext',\r\n    value: function setXMLContext() {\r\n      this.setInitialContext();\r\n      this.inXHTMLMode = false;\r\n      this.inHTMLMode = false;\r\n    }\r\n  }, {\r\n    key: 'tokenize',\r\n    value: function tokenize(str) {\r\n      return this.trim(str).split(/\\s+/);\r\n    }\r\n  }, {\r\n    key: 'toRDFNodeObject',\r\n    value: function toRDFNodeObject(x) {\r\n      if (typeof x === 'undefined') return undefined;\r\n      if (typeof x === 'string') {\r\n        if (x.substring(0, 2) === '_:') {\r\n          if (typeof this.blankNodes[x.substring(2)] === 'undefined') {\r\n            this.blankNodes[x.substring(2)] = new BlankNode(x.substring(2));\r\n          }\r\n          return this.blankNodes[x.substring(2)];\r\n        }\r\n        return rdf.namedNode(x);\r\n      }\r\n      switch (x.type) {\r\n        case RDFaProcessor.objectURI:\r\n          if (x.value.substring(0, 2) === '_:') {\r\n            if (typeof this.blankNodes[x.value.substring(2)] === 'undefined') {\r\n              this.blankNodes[x.value.substring(2)] = new BlankNode(x.value.substring(2));\r\n            }\r\n            return this.blankNodes[x.value.substring(2)];\r\n          }\r\n          return rdf.namedNode(x.value);\r\n        case RDFaProcessor.PlainLiteralURI:\r\n          return new Literal(x.value, x.language || '');\r\n        case RDFaProcessor.XMLLiteralURI:\r\n        case RDFaProcessor.HTMLLiteralURI:\r\n          var string = '';\r\n          Object.keys(x.value).forEach(function (i) {\r\n            string += Util.domToString(x.value[i], this.htmlOptions);\r\n          });\r\n          return new Literal(string, '', new NamedNode(x.type));\r\n        default:\r\n          return new Literal(x.value, '', new NamedNode(x.type));\r\n      }\r\n    }\r\n  }, {\r\n    key: 'trim',\r\n    value: function trim(str) {\r\n      return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n    }\r\n  }], [{\r\n    key: 'parseRDFaDOM',\r\n    value: function parseRDFaDOM(dom, kb, base) {\r\n      var p = new RDFaProcessor(kb, { 'base': base });\r\n      //dom.baseURI = base;\r\n      p.process(dom);\r\n    }\r\n  }]);\r\n\r\n  return RDFaProcessor;\r\n}();\r\n\r\nRDFaProcessor.XMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral';\r\nRDFaProcessor.HTMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML';\r\nRDFaProcessor.PlainLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral';\r\nRDFaProcessor.objectURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#object';\r\nRDFaProcessor.typeURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';\r\nRDFaProcessor.nameChar = '[-A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF.0-9\\xB7\\u0300-\\u036F\\u203F-\\u2040]';\r\nRDFaProcessor.nameStartChar = '[A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF\\u0100-\\u0131\\u0134-\\u013E\\u0141-\\u0148\\u014A-\\u017E\\u0180-\\u01C3\\u01CD-\\u01F0\\u01F4-\\u01F5\\u01FA-\\u0217\\u0250-\\u02A8\\u02BB-\\u02C1\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03CE\\u03D0-\\u03D6\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2-\\u03F3\\u0401-\\u040C\\u040E-\\u044F\\u0451-\\u045C\\u045E-\\u0481\\u0490-\\u04C4\\u04C7-\\u04C8\\u04CB-\\u04CC\\u04D0-\\u04EB\\u04EE-\\u04F5\\u04F8-\\u04F9\\u0531-\\u0556\\u0559\\u0561-\\u0586\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A\\u0641-\\u064A\\u0671-\\u06B7\\u06BA-\\u06BE\\u06C0-\\u06CE\\u06D0-\\u06D3\\u06D5\\u06E5-\\u06E6\\u0905-\\u0939\\u093D\\u0958-\\u0961\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8B\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AE0\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B36-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB5\\u0BB7-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D60-\\u0D61\\u0E01-\\u0E2E\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EAE\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0F40-\\u0F47\\u0F49-\\u0F69\\u10A0-\\u10C5\\u10D0-\\u10F6\\u1100\\u1102-\\u1103\\u1105-\\u1107\\u1109\\u110B-\\u110C\\u110E-\\u1112\\u113C\\u113E\\u1140\\u114C\\u114E\\u1150\\u1154-\\u1155\\u1159\\u115F-\\u1161\\u1163\\u1165\\u1167\\u1169\\u116D-\\u116E\\u1172-\\u1173\\u1175\\u119E\\u11A8\\u11AB\\u11AE-\\u11AF\\u11B7-\\u11B8\\u11BA\\u11BC-\\u11C2\\u11EB\\u11F0\\u11F9\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126\\u212A-\\u212B\\u212E\\u2180-\\u2182\\u3041-\\u3094\\u30A1-\\u30FA\\u3105-\\u312C\\uAC00-\\uD7A3\\u4E00-\\u9FA5\\u3007\\u3021-\\u3029_]';\r\nRDFaProcessor.NCNAME = new RegExp('^' + RDFaProcessor.nameStartChar + RDFaProcessor.nameChar + '*$');\r\n\r\n/*\r\nRDFaProcessor.prototype.resolveAndNormalize = function(base,href) {\r\n   var u = base.resolve(href)\r\n   var parsed = this.parseURI(u)\r\n   parsed.normalize()\r\n   return parsed.spec\r\n}\r\n*/\r\n\r\nRDFaProcessor.dateTimeTypes = [{ pattern: /-?P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\\.[0-9]+)?S)?)?/,\r\n  type: 'http://www.w3.org/2001/XMLSchema#duration' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9]T(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\\.[0-9]+)?(?:Z|[+\\-][0-9][0-9]:[0-9][0-9])?/,\r\n  type: 'http://www.w3.org/2001/XMLSchema#dateTime' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9](?:Z|[+\\-][0-9][0-9]:[0-9][0-9])?/,\r\n  type: 'http://www.w3.org/2001/XMLSchema#date' }, { pattern: /(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\\.[0-9]+)?(?:Z|[+\\-][0-9][0-9]:[0-9][0-9])?/,\r\n  type: 'http://www.w3.org/2001/XMLSchema#time' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]/,\r\n  type: 'http://www.w3.org/2001/XMLSchema#gYearMonth' }, { pattern: /-?[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9]/,\r\n  type: 'http://www.w3.org/2001/XMLSchema#gYear' }];\r\n\r\nmodule.exports = RDFaProcessor;\n\n\n// WEBPACK FOOTER //\n// ./js/rdfa-processor-dirty-hack.js"],"sourceRoot":""}